<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Envelopes/Signature.php');

namespace POGOProtos\Networking\Envelopes {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Envelopes.Signature.LocationFix
  final class Signature_LocationFix extends ProtobufMessage {

    private $_unknown;
    private $provider = ""; // optional string provider = 1
    private $timestampSnapshot = 0; // optional uint64 timestamp_snapshot = 2
    private $altitude = 0; // optional float altitude = 4
    private $latitude = 0; // optional float latitude = 13
    private $longitude = 0; // optional float longitude = 14
    private $speed = 0; // optional float speed = 18
    private $course = 0; // optional float course = 20
    private $horizontalAccuracy = 0; // optional float horizontal_accuracy = 21
    private $verticalAccuracy = 0; // optional float vertical_accuracy = 22
    private $providerStatus = 0; // optional uint64 provider_status = 26
    private $floor = 0; // optional uint32 floor = 27
    private $locationType = 0; // optional uint64 location_type = 28

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string provider = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->provider = $tmp;

            break;
          case 2: // optional uint64 timestamp_snapshot = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timestampSnapshot = $tmp;

            break;
          case 4: // optional float altitude = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->altitude = $tmp;

            break;
          case 13: // optional float latitude = 13
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->latitude = $tmp;

            break;
          case 14: // optional float longitude = 14
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->longitude = $tmp;

            break;
          case 18: // optional float speed = 18
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->speed = $tmp;

            break;
          case 20: // optional float course = 20
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->course = $tmp;

            break;
          case 21: // optional float horizontal_accuracy = 21
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->horizontalAccuracy = $tmp;

            break;
          case 22: // optional float vertical_accuracy = 22
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->verticalAccuracy = $tmp;

            break;
          case 26: // optional uint64 provider_status = 26
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->providerStatus = $tmp;

            break;
          case 27: // optional uint32 floor = 27
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->floor = $tmp;

            break;
          case 28: // optional uint64 location_type = 28
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->locationType = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->provider !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->provider));
        fwrite($fp, $this->provider);
      }
      if ($this->timestampSnapshot !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->timestampSnapshot);
      }
      if ($this->altitude !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->altitude);
      }
      if ($this->latitude !== 0) {
        fwrite($fp, "m", 1);
        Protobuf::write_float($fp, $this->latitude);
      }
      if ($this->longitude !== 0) {
        fwrite($fp, "u", 1);
        Protobuf::write_float($fp, $this->longitude);
      }
      if ($this->speed !== 0) {
        fwrite($fp, "\x95\x01", 2);
        Protobuf::write_float($fp, $this->speed);
      }
      if ($this->course !== 0) {
        fwrite($fp, "\xa5\x01", 2);
        Protobuf::write_float($fp, $this->course);
      }
      if ($this->horizontalAccuracy !== 0) {
        fwrite($fp, "\xad\x01", 2);
        Protobuf::write_float($fp, $this->horizontalAccuracy);
      }
      if ($this->verticalAccuracy !== 0) {
        fwrite($fp, "\xb5\x01", 2);
        Protobuf::write_float($fp, $this->verticalAccuracy);
      }
      if ($this->providerStatus !== 0) {
        fwrite($fp, "\xd0\x01", 2);
        Protobuf::write_varint($fp, $this->providerStatus);
      }
      if ($this->floor !== 0) {
        fwrite($fp, "\xd8\x01", 2);
        Protobuf::write_varint($fp, $this->floor);
      }
      if ($this->locationType !== 0) {
        fwrite($fp, "\xe0\x01", 2);
        Protobuf::write_varint($fp, $this->locationType);
      }
    }

    public function size() {
      $size = 0;
      if ($this->provider !== "") {
        $l = strlen($this->provider);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->timestampSnapshot !== 0) {
        $size += 1 + Protobuf::size_varint($this->timestampSnapshot);
      }
      if ($this->altitude !== 0) {
        $size += 5;
      }
      if ($this->latitude !== 0) {
        $size += 5;
      }
      if ($this->longitude !== 0) {
        $size += 5;
      }
      if ($this->speed !== 0) {
        $size += 6;
      }
      if ($this->course !== 0) {
        $size += 6;
      }
      if ($this->horizontalAccuracy !== 0) {
        $size += 6;
      }
      if ($this->verticalAccuracy !== 0) {
        $size += 6;
      }
      if ($this->providerStatus !== 0) {
        $size += 2 + Protobuf::size_varint($this->providerStatus);
      }
      if ($this->floor !== 0) {
        $size += 2 + Protobuf::size_varint($this->floor);
      }
      if ($this->locationType !== 0) {
        $size += 2 + Protobuf::size_varint($this->locationType);
      }
      return $size;
    }

    public function clearProvider() { $this->provider = ""; }
    public function getProvider() { return $this->provider;}
    public function setProvider($value) { $this->provider = $value; }

    public function clearTimestampSnapshot() { $this->timestampSnapshot = 0; }
    public function getTimestampSnapshot() { return $this->timestampSnapshot;}
    public function setTimestampSnapshot($value) { $this->timestampSnapshot = $value; }

    public function clearAltitude() { $this->altitude = 0; }
    public function getAltitude() { return $this->altitude;}
    public function setAltitude($value) { $this->altitude = $value; }

    public function clearLatitude() { $this->latitude = 0; }
    public function getLatitude() { return $this->latitude;}
    public function setLatitude($value) { $this->latitude = $value; }

    public function clearLongitude() { $this->longitude = 0; }
    public function getLongitude() { return $this->longitude;}
    public function setLongitude($value) { $this->longitude = $value; }

    public function clearSpeed() { $this->speed = 0; }
    public function getSpeed() { return $this->speed;}
    public function setSpeed($value) { $this->speed = $value; }

    public function clearCourse() { $this->course = 0; }
    public function getCourse() { return $this->course;}
    public function setCourse($value) { $this->course = $value; }

    public function clearHorizontalAccuracy() { $this->horizontalAccuracy = 0; }
    public function getHorizontalAccuracy() { return $this->horizontalAccuracy;}
    public function setHorizontalAccuracy($value) { $this->horizontalAccuracy = $value; }

    public function clearVerticalAccuracy() { $this->verticalAccuracy = 0; }
    public function getVerticalAccuracy() { return $this->verticalAccuracy;}
    public function setVerticalAccuracy($value) { $this->verticalAccuracy = $value; }

    public function clearProviderStatus() { $this->providerStatus = 0; }
    public function getProviderStatus() { return $this->providerStatus;}
    public function setProviderStatus($value) { $this->providerStatus = $value; }

    public function clearFloor() { $this->floor = 0; }
    public function getFloor() { return $this->floor;}
    public function setFloor($value) { $this->floor = $value; }

    public function clearLocationType() { $this->locationType = 0; }
    public function getLocationType() { return $this->locationType;}
    public function setLocationType($value) { $this->locationType = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('provider', $this->provider, "")
           . Protobuf::toString('timestamp_snapshot', $this->timestampSnapshot, 0)
           . Protobuf::toString('altitude', $this->altitude, 0)
           . Protobuf::toString('latitude', $this->latitude, 0)
           . Protobuf::toString('longitude', $this->longitude, 0)
           . Protobuf::toString('speed', $this->speed, 0)
           . Protobuf::toString('course', $this->course, 0)
           . Protobuf::toString('horizontal_accuracy', $this->horizontalAccuracy, 0)
           . Protobuf::toString('vertical_accuracy', $this->verticalAccuracy, 0)
           . Protobuf::toString('provider_status', $this->providerStatus, 0)
           . Protobuf::toString('floor', $this->floor, 0)
           . Protobuf::toString('location_type', $this->locationType, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature.LocationFix)
  }


  // message POGOProtos.Networking.Envelopes.Signature.AndroidGpsInfo
  final class Signature_AndroidGpsInfo extends ProtobufMessage {

    private $_unknown;
    private $timeToFix = 0; // optional uint64 time_to_fix = 1
    private $satellitesPrn = array(); // repeated int32 satellites_prn = 2
    private $azimuth = array(); // repeated float azimuth = 3
    private $elevation = array(); // repeated float elevation = 4
    private $snr = array(); // repeated float snr = 5
    private $hasAlmanac = array(); // repeated bool has_almanac = 6
    private $hasEphemeris = array(); // repeated bool has_ephemeris = 7
    private $usedInFix = array(); // repeated bool used_in_fix = 8

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional uint64 time_to_fix = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timeToFix = $tmp;

            break;
          case 2: // repeated int32 satellites_prn = 2
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_signed_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->satellitesPrn[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_signed_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->satellitesPrn[] = $tmp;
              }
            }

            break;
          case 3: // repeated float azimuth = 3
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->azimuth[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->azimuth[] = $tmp;
              }
            }

            break;
          case 4: // repeated float elevation = 4
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->elevation[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->elevation[] = $tmp;
              }
            }

            break;
          case 5: // repeated float snr = 5
            if($wire !== 2 && $wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 5 got: $wire");
            }
            if ($wire === 5) {
              $tmp = Protobuf::read_float($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
              $this->snr[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_float($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
                $this->snr[] = $tmp;
              }
            }

            break;
          case 6: // repeated bool has_almanac = 6
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->hasAlmanac[] = ($tmp > 0) ? true : false;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->hasAlmanac[] = ($tmp > 0) ? true : false;
              }
            }

            break;
          case 7: // repeated bool has_ephemeris = 7
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->hasEphemeris[] = ($tmp > 0) ? true : false;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->hasEphemeris[] = ($tmp > 0) ? true : false;
              }
            }

            break;
          case 8: // repeated bool used_in_fix = 8
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              $this->usedInFix[] = ($tmp > 0) ? true : false;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                $this->usedInFix[] = ($tmp > 0) ? true : false;
              }
            }

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->timeToFix !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->timeToFix);
      }
      foreach($this->satellitesPrn as $v) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $v);
      }
      foreach($this->azimuth as $v) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->elevation as $v) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->snr as $v) {
        fwrite($fp, "-", 1);
        Protobuf::write_float($fp, $v);
      }
      foreach($this->hasAlmanac as $v) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $v ? 1 : 0);
      }
      foreach($this->hasEphemeris as $v) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $v ? 1 : 0);
      }
      foreach($this->usedInFix as $v) {
        fwrite($fp, "@", 1);
        Protobuf::write_varint($fp, $v ? 1 : 0);
      }
    }

    public function size() {
      $size = 0;
      if ($this->timeToFix !== 0) {
        $size += 1 + Protobuf::size_varint($this->timeToFix);
      }
      foreach($this->satellitesPrn as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->azimuth as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->elevation as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->snr as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->hasAlmanac as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->hasEphemeris as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->usedInFix as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearTimeToFix() { $this->timeToFix = 0; }
    public function getTimeToFix() { return $this->timeToFix;}
    public function setTimeToFix($value) { $this->timeToFix = $value; }

    public function clearSatellitesPrn() { $this->satellitesPrn = array(); }
    public function getSatellitesPrnCount() { return count($this->satellitesPrn); }
    public function getSatellitesPrn($index) { return $this->satellitesPrn[$index]; }
    public function getSatellitesPrnArray() { return $this->satellitesPrn; }
    public function setSatellitesPrn($index, array $value) {$this->satellitesPrn[$index] = $value; }
    public function addSatellitesPrn(array $value) { $this->satellitesPrn[] = $value; }
    public function addAllSatellitesPrn(array $values) { foreach($values as $value) {$this->satellitesPrn[] = $value; }}

    public function clearAzimuth() { $this->azimuth = array(); }
    public function getAzimuthCount() { return count($this->azimuth); }
    public function getAzimuth($index) { return $this->azimuth[$index]; }
    public function getAzimuthArray() { return $this->azimuth; }
    public function setAzimuth($index, array $value) {$this->azimuth[$index] = $value; }
    public function addAzimuth(array $value) { $this->azimuth[] = $value; }
    public function addAllAzimuth(array $values) { foreach($values as $value) {$this->azimuth[] = $value; }}

    public function clearElevation() { $this->elevation = array(); }
    public function getElevationCount() { return count($this->elevation); }
    public function getElevation($index) { return $this->elevation[$index]; }
    public function getElevationArray() { return $this->elevation; }
    public function setElevation($index, array $value) {$this->elevation[$index] = $value; }
    public function addElevation(array $value) { $this->elevation[] = $value; }
    public function addAllElevation(array $values) { foreach($values as $value) {$this->elevation[] = $value; }}

    public function clearSnr() { $this->snr = array(); }
    public function getSnrCount() { return count($this->snr); }
    public function getSnr($index) { return $this->snr[$index]; }
    public function getSnrArray() { return $this->snr; }
    public function setSnr($index, array $value) {$this->snr[$index] = $value; }
    public function addSnr(array $value) { $this->snr[] = $value; }
    public function addAllSnr(array $values) { foreach($values as $value) {$this->snr[] = $value; }}

    public function clearHasAlmanac() { $this->hasAlmanac = array(); }
    public function getHasAlmanacCount() { return count($this->hasAlmanac); }
    public function getHasAlmanac($index) { return $this->hasAlmanac[$index]; }
    public function getHasAlmanacArray() { return $this->hasAlmanac; }
    public function setHasAlmanac($index, array $value) {$this->hasAlmanac[$index] = $value; }
    public function addHasAlmanac(array $value) { $this->hasAlmanac[] = $value; }
    public function addAllHasAlmanac(array $values) { foreach($values as $value) {$this->hasAlmanac[] = $value; }}

    public function clearHasEphemeris() { $this->hasEphemeris = array(); }
    public function getHasEphemerisCount() { return count($this->hasEphemeris); }
    public function getHasEphemeris($index) { return $this->hasEphemeris[$index]; }
    public function getHasEphemerisArray() { return $this->hasEphemeris; }
    public function setHasEphemeris($index, array $value) {$this->hasEphemeris[$index] = $value; }
    public function addHasEphemeris(array $value) { $this->hasEphemeris[] = $value; }
    public function addAllHasEphemeris(array $values) { foreach($values as $value) {$this->hasEphemeris[] = $value; }}

    public function clearUsedInFix() { $this->usedInFix = array(); }
    public function getUsedInFixCount() { return count($this->usedInFix); }
    public function getUsedInFix($index) { return $this->usedInFix[$index]; }
    public function getUsedInFixArray() { return $this->usedInFix; }
    public function setUsedInFix($index, array $value) {$this->usedInFix[$index] = $value; }
    public function addUsedInFix(array $value) { $this->usedInFix[] = $value; }
    public function addAllUsedInFix(array $values) { foreach($values as $value) {$this->usedInFix[] = $value; }}

    public function __toString() {
      return ''
           . Protobuf::toString('time_to_fix', $this->timeToFix, 0)
           . Protobuf::toString('satellites_prn', $this->satellitesPrn, 0)
           . Protobuf::toString('azimuth', $this->azimuth, 0)
           . Protobuf::toString('elevation', $this->elevation, 0)
           . Protobuf::toString('snr', $this->snr, 0)
           . Protobuf::toString('has_almanac', $this->hasAlmanac, false)
           . Protobuf::toString('has_ephemeris', $this->hasEphemeris, false)
           . Protobuf::toString('used_in_fix', $this->usedInFix, false);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature.AndroidGpsInfo)
  }


  // message POGOProtos.Networking.Envelopes.Signature.SensorInfo
  final class Signature_SensorInfo extends ProtobufMessage {

    private $_unknown;
    private $timestampSnapshot = 0; // optional uint64 timestamp_snapshot = 1
    private $linearAccelerationX = 0; // optional double linear_acceleration_x = 3
    private $linearAccelerationY = 0; // optional double linear_acceleration_y = 4
    private $linearAccelerationZ = 0; // optional double linear_acceleration_z = 5
    private $magneticFieldX = 0; // optional double magnetic_field_x = 6
    private $magneticFieldY = 0; // optional double magnetic_field_y = 7
    private $magneticFieldZ = 0; // optional double magnetic_field_z = 8
    private $magneticFieldAccuracy = 0; // optional int32 magnetic_field_accuracy = 9
    private $attitudePitch = 0; // optional double attitude_pitch = 10
    private $attitudeYaw = 0; // optional double attitude_yaw = 11
    private $attitudeRoll = 0; // optional double attitude_roll = 12
    private $rotationRateX = 0; // optional double rotation_rate_x = 13
    private $rotationRateY = 0; // optional double rotation_rate_y = 14
    private $rotationRateZ = 0; // optional double rotation_rate_z = 15
    private $gravityX = 0; // optional double gravity_x = 16
    private $gravityY = 0; // optional double gravity_y = 17
    private $gravityZ = 0; // optional double gravity_z = 18
    private $status = 0; // optional int32 status = 19

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional uint64 timestamp_snapshot = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timestampSnapshot = $tmp;

            break;
          case 3: // optional double linear_acceleration_x = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->linearAccelerationX = $tmp;

            break;
          case 4: // optional double linear_acceleration_y = 4
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->linearAccelerationY = $tmp;

            break;
          case 5: // optional double linear_acceleration_z = 5
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->linearAccelerationZ = $tmp;

            break;
          case 6: // optional double magnetic_field_x = 6
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->magneticFieldX = $tmp;

            break;
          case 7: // optional double magnetic_field_y = 7
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->magneticFieldY = $tmp;

            break;
          case 8: // optional double magnetic_field_z = 8
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->magneticFieldZ = $tmp;

            break;
          case 9: // optional int32 magnetic_field_accuracy = 9
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->magneticFieldAccuracy = $tmp;

            break;
          case 10: // optional double attitude_pitch = 10
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->attitudePitch = $tmp;

            break;
          case 11: // optional double attitude_yaw = 11
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->attitudeYaw = $tmp;

            break;
          case 12: // optional double attitude_roll = 12
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->attitudeRoll = $tmp;

            break;
          case 13: // optional double rotation_rate_x = 13
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->rotationRateX = $tmp;

            break;
          case 14: // optional double rotation_rate_y = 14
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->rotationRateY = $tmp;

            break;
          case 15: // optional double rotation_rate_z = 15
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->rotationRateZ = $tmp;

            break;
          case 16: // optional double gravity_x = 16
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->gravityX = $tmp;

            break;
          case 17: // optional double gravity_y = 17
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->gravityY = $tmp;

            break;
          case 18: // optional double gravity_z = 18
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->gravityZ = $tmp;

            break;
          case 19: // optional int32 status = 19
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->status = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->timestampSnapshot !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->timestampSnapshot);
      }
      if ($this->linearAccelerationX !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->linearAccelerationX);
      }
      if ($this->linearAccelerationY !== 0) {
        fwrite($fp, "!", 1);
        Protobuf::write_double($fp, $this->linearAccelerationY);
      }
      if ($this->linearAccelerationZ !== 0) {
        fwrite($fp, ")", 1);
        Protobuf::write_double($fp, $this->linearAccelerationZ);
      }
      if ($this->magneticFieldX !== 0) {
        fwrite($fp, "1", 1);
        Protobuf::write_double($fp, $this->magneticFieldX);
      }
      if ($this->magneticFieldY !== 0) {
        fwrite($fp, "9", 1);
        Protobuf::write_double($fp, $this->magneticFieldY);
      }
      if ($this->magneticFieldZ !== 0) {
        fwrite($fp, "A", 1);
        Protobuf::write_double($fp, $this->magneticFieldZ);
      }
      if ($this->magneticFieldAccuracy !== 0) {
        fwrite($fp, "H", 1);
        Protobuf::write_varint($fp, $this->magneticFieldAccuracy);
      }
      if ($this->attitudePitch !== 0) {
        fwrite($fp, "Q", 1);
        Protobuf::write_double($fp, $this->attitudePitch);
      }
      if ($this->attitudeYaw !== 0) {
        fwrite($fp, "Y", 1);
        Protobuf::write_double($fp, $this->attitudeYaw);
      }
      if ($this->attitudeRoll !== 0) {
        fwrite($fp, "a", 1);
        Protobuf::write_double($fp, $this->attitudeRoll);
      }
      if ($this->rotationRateX !== 0) {
        fwrite($fp, "i", 1);
        Protobuf::write_double($fp, $this->rotationRateX);
      }
      if ($this->rotationRateY !== 0) {
        fwrite($fp, "q", 1);
        Protobuf::write_double($fp, $this->rotationRateY);
      }
      if ($this->rotationRateZ !== 0) {
        fwrite($fp, "y", 1);
        Protobuf::write_double($fp, $this->rotationRateZ);
      }
      if ($this->gravityX !== 0) {
        fwrite($fp, "\x81\x01", 2);
        Protobuf::write_double($fp, $this->gravityX);
      }
      if ($this->gravityY !== 0) {
        fwrite($fp, "\x89\x01", 2);
        Protobuf::write_double($fp, $this->gravityY);
      }
      if ($this->gravityZ !== 0) {
        fwrite($fp, "\x91\x01", 2);
        Protobuf::write_double($fp, $this->gravityZ);
      }
      if ($this->status !== 0) {
        fwrite($fp, "\x98\x01", 2);
        Protobuf::write_varint($fp, $this->status);
      }
    }

    public function size() {
      $size = 0;
      if ($this->timestampSnapshot !== 0) {
        $size += 1 + Protobuf::size_varint($this->timestampSnapshot);
      }
      if ($this->linearAccelerationX !== 0) {
        $size += 9;
      }
      if ($this->linearAccelerationY !== 0) {
        $size += 9;
      }
      if ($this->linearAccelerationZ !== 0) {
        $size += 9;
      }
      if ($this->magneticFieldX !== 0) {
        $size += 9;
      }
      if ($this->magneticFieldY !== 0) {
        $size += 9;
      }
      if ($this->magneticFieldZ !== 0) {
        $size += 9;
      }
      if ($this->magneticFieldAccuracy !== 0) {
        $size += 1 + Protobuf::size_varint($this->magneticFieldAccuracy);
      }
      if ($this->attitudePitch !== 0) {
        $size += 9;
      }
      if ($this->attitudeYaw !== 0) {
        $size += 9;
      }
      if ($this->attitudeRoll !== 0) {
        $size += 9;
      }
      if ($this->rotationRateX !== 0) {
        $size += 9;
      }
      if ($this->rotationRateY !== 0) {
        $size += 9;
      }
      if ($this->rotationRateZ !== 0) {
        $size += 9;
      }
      if ($this->gravityX !== 0) {
        $size += 10;
      }
      if ($this->gravityY !== 0) {
        $size += 10;
      }
      if ($this->gravityZ !== 0) {
        $size += 10;
      }
      if ($this->status !== 0) {
        $size += 2 + Protobuf::size_varint($this->status);
      }
      return $size;
    }

    public function clearTimestampSnapshot() { $this->timestampSnapshot = 0; }
    public function getTimestampSnapshot() { return $this->timestampSnapshot;}
    public function setTimestampSnapshot($value) { $this->timestampSnapshot = $value; }

    public function clearLinearAccelerationX() { $this->linearAccelerationX = 0; }
    public function getLinearAccelerationX() { return $this->linearAccelerationX;}
    public function setLinearAccelerationX($value) { $this->linearAccelerationX = $value; }

    public function clearLinearAccelerationY() { $this->linearAccelerationY = 0; }
    public function getLinearAccelerationY() { return $this->linearAccelerationY;}
    public function setLinearAccelerationY($value) { $this->linearAccelerationY = $value; }

    public function clearLinearAccelerationZ() { $this->linearAccelerationZ = 0; }
    public function getLinearAccelerationZ() { return $this->linearAccelerationZ;}
    public function setLinearAccelerationZ($value) { $this->linearAccelerationZ = $value; }

    public function clearMagneticFieldX() { $this->magneticFieldX = 0; }
    public function getMagneticFieldX() { return $this->magneticFieldX;}
    public function setMagneticFieldX($value) { $this->magneticFieldX = $value; }

    public function clearMagneticFieldY() { $this->magneticFieldY = 0; }
    public function getMagneticFieldY() { return $this->magneticFieldY;}
    public function setMagneticFieldY($value) { $this->magneticFieldY = $value; }

    public function clearMagneticFieldZ() { $this->magneticFieldZ = 0; }
    public function getMagneticFieldZ() { return $this->magneticFieldZ;}
    public function setMagneticFieldZ($value) { $this->magneticFieldZ = $value; }

    public function clearMagneticFieldAccuracy() { $this->magneticFieldAccuracy = 0; }
    public function getMagneticFieldAccuracy() { return $this->magneticFieldAccuracy;}
    public function setMagneticFieldAccuracy($value) { $this->magneticFieldAccuracy = $value; }

    public function clearAttitudePitch() { $this->attitudePitch = 0; }
    public function getAttitudePitch() { return $this->attitudePitch;}
    public function setAttitudePitch($value) { $this->attitudePitch = $value; }

    public function clearAttitudeYaw() { $this->attitudeYaw = 0; }
    public function getAttitudeYaw() { return $this->attitudeYaw;}
    public function setAttitudeYaw($value) { $this->attitudeYaw = $value; }

    public function clearAttitudeRoll() { $this->attitudeRoll = 0; }
    public function getAttitudeRoll() { return $this->attitudeRoll;}
    public function setAttitudeRoll($value) { $this->attitudeRoll = $value; }

    public function clearRotationRateX() { $this->rotationRateX = 0; }
    public function getRotationRateX() { return $this->rotationRateX;}
    public function setRotationRateX($value) { $this->rotationRateX = $value; }

    public function clearRotationRateY() { $this->rotationRateY = 0; }
    public function getRotationRateY() { return $this->rotationRateY;}
    public function setRotationRateY($value) { $this->rotationRateY = $value; }

    public function clearRotationRateZ() { $this->rotationRateZ = 0; }
    public function getRotationRateZ() { return $this->rotationRateZ;}
    public function setRotationRateZ($value) { $this->rotationRateZ = $value; }

    public function clearGravityX() { $this->gravityX = 0; }
    public function getGravityX() { return $this->gravityX;}
    public function setGravityX($value) { $this->gravityX = $value; }

    public function clearGravityY() { $this->gravityY = 0; }
    public function getGravityY() { return $this->gravityY;}
    public function setGravityY($value) { $this->gravityY = $value; }

    public function clearGravityZ() { $this->gravityZ = 0; }
    public function getGravityZ() { return $this->gravityZ;}
    public function setGravityZ($value) { $this->gravityZ = $value; }

    public function clearStatus() { $this->status = 0; }
    public function getStatus() { return $this->status;}
    public function setStatus($value) { $this->status = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('timestamp_snapshot', $this->timestampSnapshot, 0)
           . Protobuf::toString('linear_acceleration_x', $this->linearAccelerationX, 0)
           . Protobuf::toString('linear_acceleration_y', $this->linearAccelerationY, 0)
           . Protobuf::toString('linear_acceleration_z', $this->linearAccelerationZ, 0)
           . Protobuf::toString('magnetic_field_x', $this->magneticFieldX, 0)
           . Protobuf::toString('magnetic_field_y', $this->magneticFieldY, 0)
           . Protobuf::toString('magnetic_field_z', $this->magneticFieldZ, 0)
           . Protobuf::toString('magnetic_field_accuracy', $this->magneticFieldAccuracy, 0)
           . Protobuf::toString('attitude_pitch', $this->attitudePitch, 0)
           . Protobuf::toString('attitude_yaw', $this->attitudeYaw, 0)
           . Protobuf::toString('attitude_roll', $this->attitudeRoll, 0)
           . Protobuf::toString('rotation_rate_x', $this->rotationRateX, 0)
           . Protobuf::toString('rotation_rate_y', $this->rotationRateY, 0)
           . Protobuf::toString('rotation_rate_z', $this->rotationRateZ, 0)
           . Protobuf::toString('gravity_x', $this->gravityX, 0)
           . Protobuf::toString('gravity_y', $this->gravityY, 0)
           . Protobuf::toString('gravity_z', $this->gravityZ, 0)
           . Protobuf::toString('status', $this->status, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature.SensorInfo)
  }


  // message POGOProtos.Networking.Envelopes.Signature.DeviceInfo
  final class Signature_DeviceInfo extends ProtobufMessage {

    private $_unknown;
    private $deviceId = ""; // optional string device_id = 1
    private $androidBoardName = ""; // optional string android_board_name = 2
    private $androidBootloader = ""; // optional string android_bootloader = 3
    private $deviceBrand = ""; // optional string device_brand = 4
    private $deviceModel = ""; // optional string device_model = 5
    private $deviceModelIdentifier = ""; // optional string device_model_identifier = 6
    private $deviceModelBoot = ""; // optional string device_model_boot = 7
    private $hardwareManufacturer = ""; // optional string hardware_manufacturer = 8
    private $hardwareModel = ""; // optional string hardware_model = 9
    private $firmwareBrand = ""; // optional string firmware_brand = 10
    private $firmwareTags = ""; // optional string firmware_tags = 12
    private $firmwareType = ""; // optional string firmware_type = 13
    private $firmwareFingerprint = ""; // optional string firmware_fingerprint = 14

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string device_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deviceId = $tmp;

            break;
          case 2: // optional string android_board_name = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->androidBoardName = $tmp;

            break;
          case 3: // optional string android_bootloader = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->androidBootloader = $tmp;

            break;
          case 4: // optional string device_brand = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deviceBrand = $tmp;

            break;
          case 5: // optional string device_model = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deviceModel = $tmp;

            break;
          case 6: // optional string device_model_identifier = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deviceModelIdentifier = $tmp;

            break;
          case 7: // optional string device_model_boot = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->deviceModelBoot = $tmp;

            break;
          case 8: // optional string hardware_manufacturer = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->hardwareManufacturer = $tmp;

            break;
          case 9: // optional string hardware_model = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->hardwareModel = $tmp;

            break;
          case 10: // optional string firmware_brand = 10
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->firmwareBrand = $tmp;

            break;
          case 12: // optional string firmware_tags = 12
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->firmwareTags = $tmp;

            break;
          case 13: // optional string firmware_type = 13
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->firmwareType = $tmp;

            break;
          case 14: // optional string firmware_fingerprint = 14
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->firmwareFingerprint = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->deviceId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->deviceId));
        fwrite($fp, $this->deviceId);
      }
      if ($this->androidBoardName !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->androidBoardName));
        fwrite($fp, $this->androidBoardName);
      }
      if ($this->androidBootloader !== "") {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, strlen($this->androidBootloader));
        fwrite($fp, $this->androidBootloader);
      }
      if ($this->deviceBrand !== "") {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, strlen($this->deviceBrand));
        fwrite($fp, $this->deviceBrand);
      }
      if ($this->deviceModel !== "") {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, strlen($this->deviceModel));
        fwrite($fp, $this->deviceModel);
      }
      if ($this->deviceModelIdentifier !== "") {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, strlen($this->deviceModelIdentifier));
        fwrite($fp, $this->deviceModelIdentifier);
      }
      if ($this->deviceModelBoot !== "") {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, strlen($this->deviceModelBoot));
        fwrite($fp, $this->deviceModelBoot);
      }
      if ($this->hardwareManufacturer !== "") {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, strlen($this->hardwareManufacturer));
        fwrite($fp, $this->hardwareManufacturer);
      }
      if ($this->hardwareModel !== "") {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, strlen($this->hardwareModel));
        fwrite($fp, $this->hardwareModel);
      }
      if ($this->firmwareBrand !== "") {
        fwrite($fp, "R", 1);
        Protobuf::write_varint($fp, strlen($this->firmwareBrand));
        fwrite($fp, $this->firmwareBrand);
      }
      if ($this->firmwareTags !== "") {
        fwrite($fp, "b", 1);
        Protobuf::write_varint($fp, strlen($this->firmwareTags));
        fwrite($fp, $this->firmwareTags);
      }
      if ($this->firmwareType !== "") {
        fwrite($fp, "j", 1);
        Protobuf::write_varint($fp, strlen($this->firmwareType));
        fwrite($fp, $this->firmwareType);
      }
      if ($this->firmwareFingerprint !== "") {
        fwrite($fp, "r", 1);
        Protobuf::write_varint($fp, strlen($this->firmwareFingerprint));
        fwrite($fp, $this->firmwareFingerprint);
      }
    }

    public function size() {
      $size = 0;
      if ($this->deviceId !== "") {
        $l = strlen($this->deviceId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->androidBoardName !== "") {
        $l = strlen($this->androidBoardName);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->androidBootloader !== "") {
        $l = strlen($this->androidBootloader);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->deviceBrand !== "") {
        $l = strlen($this->deviceBrand);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->deviceModel !== "") {
        $l = strlen($this->deviceModel);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->deviceModelIdentifier !== "") {
        $l = strlen($this->deviceModelIdentifier);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->deviceModelBoot !== "") {
        $l = strlen($this->deviceModelBoot);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->hardwareManufacturer !== "") {
        $l = strlen($this->hardwareManufacturer);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->hardwareModel !== "") {
        $l = strlen($this->hardwareModel);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->firmwareBrand !== "") {
        $l = strlen($this->firmwareBrand);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->firmwareTags !== "") {
        $l = strlen($this->firmwareTags);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->firmwareType !== "") {
        $l = strlen($this->firmwareType);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->firmwareFingerprint !== "") {
        $l = strlen($this->firmwareFingerprint);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearDeviceId() { $this->deviceId = ""; }
    public function getDeviceId() { return $this->deviceId;}
    public function setDeviceId($value) { $this->deviceId = $value; }

    public function clearAndroidBoardName() { $this->androidBoardName = ""; }
    public function getAndroidBoardName() { return $this->androidBoardName;}
    public function setAndroidBoardName($value) { $this->androidBoardName = $value; }

    public function clearAndroidBootloader() { $this->androidBootloader = ""; }
    public function getAndroidBootloader() { return $this->androidBootloader;}
    public function setAndroidBootloader($value) { $this->androidBootloader = $value; }

    public function clearDeviceBrand() { $this->deviceBrand = ""; }
    public function getDeviceBrand() { return $this->deviceBrand;}
    public function setDeviceBrand($value) { $this->deviceBrand = $value; }

    public function clearDeviceModel() { $this->deviceModel = ""; }
    public function getDeviceModel() { return $this->deviceModel;}
    public function setDeviceModel($value) { $this->deviceModel = $value; }

    public function clearDeviceModelIdentifier() { $this->deviceModelIdentifier = ""; }
    public function getDeviceModelIdentifier() { return $this->deviceModelIdentifier;}
    public function setDeviceModelIdentifier($value) { $this->deviceModelIdentifier = $value; }

    public function clearDeviceModelBoot() { $this->deviceModelBoot = ""; }
    public function getDeviceModelBoot() { return $this->deviceModelBoot;}
    public function setDeviceModelBoot($value) { $this->deviceModelBoot = $value; }

    public function clearHardwareManufacturer() { $this->hardwareManufacturer = ""; }
    public function getHardwareManufacturer() { return $this->hardwareManufacturer;}
    public function setHardwareManufacturer($value) { $this->hardwareManufacturer = $value; }

    public function clearHardwareModel() { $this->hardwareModel = ""; }
    public function getHardwareModel() { return $this->hardwareModel;}
    public function setHardwareModel($value) { $this->hardwareModel = $value; }

    public function clearFirmwareBrand() { $this->firmwareBrand = ""; }
    public function getFirmwareBrand() { return $this->firmwareBrand;}
    public function setFirmwareBrand($value) { $this->firmwareBrand = $value; }

    public function clearFirmwareTags() { $this->firmwareTags = ""; }
    public function getFirmwareTags() { return $this->firmwareTags;}
    public function setFirmwareTags($value) { $this->firmwareTags = $value; }

    public function clearFirmwareType() { $this->firmwareType = ""; }
    public function getFirmwareType() { return $this->firmwareType;}
    public function setFirmwareType($value) { $this->firmwareType = $value; }

    public function clearFirmwareFingerprint() { $this->firmwareFingerprint = ""; }
    public function getFirmwareFingerprint() { return $this->firmwareFingerprint;}
    public function setFirmwareFingerprint($value) { $this->firmwareFingerprint = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('device_id', $this->deviceId, "")
           . Protobuf::toString('android_board_name', $this->androidBoardName, "")
           . Protobuf::toString('android_bootloader', $this->androidBootloader, "")
           . Protobuf::toString('device_brand', $this->deviceBrand, "")
           . Protobuf::toString('device_model', $this->deviceModel, "")
           . Protobuf::toString('device_model_identifier', $this->deviceModelIdentifier, "")
           . Protobuf::toString('device_model_boot', $this->deviceModelBoot, "")
           . Protobuf::toString('hardware_manufacturer', $this->hardwareManufacturer, "")
           . Protobuf::toString('hardware_model', $this->hardwareModel, "")
           . Protobuf::toString('firmware_brand', $this->firmwareBrand, "")
           . Protobuf::toString('firmware_tags', $this->firmwareTags, "")
           . Protobuf::toString('firmware_type', $this->firmwareType, "")
           . Protobuf::toString('firmware_fingerprint', $this->firmwareFingerprint, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature.DeviceInfo)
  }


  // message POGOProtos.Networking.Envelopes.Signature.ActivityStatus
  final class Signature_ActivityStatus extends ProtobufMessage {

    private $_unknown;
    private $startTimeMs = 0; // optional uint64 start_time_ms = 1
    private $unknownStatus = false; // optional bool unknown_status = 2
    private $walking = false; // optional bool walking = 3
    private $running = false; // optional bool running = 4
    private $stationary = false; // optional bool stationary = 5
    private $automotive = false; // optional bool automotive = 6
    private $tilting = false; // optional bool tilting = 7
    private $cycling = false; // optional bool cycling = 8
    private $status = ""; // optional bytes status = 9

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional uint64 start_time_ms = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->startTimeMs = $tmp;

            break;
          case 2: // optional bool unknown_status = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->unknownStatus = ($tmp > 0) ? true : false;

            break;
          case 3: // optional bool walking = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->walking = ($tmp > 0) ? true : false;

            break;
          case 4: // optional bool running = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->running = ($tmp > 0) ? true : false;

            break;
          case 5: // optional bool stationary = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->stationary = ($tmp > 0) ? true : false;

            break;
          case 6: // optional bool automotive = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->automotive = ($tmp > 0) ? true : false;

            break;
          case 7: // optional bool tilting = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->tilting = ($tmp > 0) ? true : false;

            break;
          case 8: // optional bool cycling = 8
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->cycling = ($tmp > 0) ? true : false;

            break;
          case 9: // optional bytes status = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->status = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->startTimeMs !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->startTimeMs);
      }
      if ($this->unknownStatus !== false) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->unknownStatus ? 1 : 0);
      }
      if ($this->walking !== false) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->walking ? 1 : 0);
      }
      if ($this->running !== false) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->running ? 1 : 0);
      }
      if ($this->stationary !== false) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->stationary ? 1 : 0);
      }
      if ($this->automotive !== false) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->automotive ? 1 : 0);
      }
      if ($this->tilting !== false) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->tilting ? 1 : 0);
      }
      if ($this->cycling !== false) {
        fwrite($fp, "@", 1);
        Protobuf::write_varint($fp, $this->cycling ? 1 : 0);
      }
      if ($this->status !== "") {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, strlen($this->status));
        fwrite($fp, $this->status);
      }
    }

    public function size() {
      $size = 0;
      if ($this->startTimeMs !== 0) {
        $size += 1 + Protobuf::size_varint($this->startTimeMs);
      }
      if ($this->unknownStatus !== false) {
        $size += 2;
      }
      if ($this->walking !== false) {
        $size += 2;
      }
      if ($this->running !== false) {
        $size += 2;
      }
      if ($this->stationary !== false) {
        $size += 2;
      }
      if ($this->automotive !== false) {
        $size += 2;
      }
      if ($this->tilting !== false) {
        $size += 2;
      }
      if ($this->cycling !== false) {
        $size += 2;
      }
      if ($this->status !== "") {
        $l = strlen($this->status);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearStartTimeMs() { $this->startTimeMs = 0; }
    public function getStartTimeMs() { return $this->startTimeMs;}
    public function setStartTimeMs($value) { $this->startTimeMs = $value; }

    public function clearUnknownStatus() { $this->unknownStatus = false; }
    public function getUnknownStatus() { return $this->unknownStatus;}
    public function setUnknownStatus($value) { $this->unknownStatus = $value; }

    public function clearWalking() { $this->walking = false; }
    public function getWalking() { return $this->walking;}
    public function setWalking($value) { $this->walking = $value; }

    public function clearRunning() { $this->running = false; }
    public function getRunning() { return $this->running;}
    public function setRunning($value) { $this->running = $value; }

    public function clearStationary() { $this->stationary = false; }
    public function getStationary() { return $this->stationary;}
    public function setStationary($value) { $this->stationary = $value; }

    public function clearAutomotive() { $this->automotive = false; }
    public function getAutomotive() { return $this->automotive;}
    public function setAutomotive($value) { $this->automotive = $value; }

    public function clearTilting() { $this->tilting = false; }
    public function getTilting() { return $this->tilting;}
    public function setTilting($value) { $this->tilting = $value; }

    public function clearCycling() { $this->cycling = false; }
    public function getCycling() { return $this->cycling;}
    public function setCycling($value) { $this->cycling = $value; }

    public function clearStatus() { $this->status = ""; }
    public function getStatus() { return $this->status;}
    public function setStatus($value) { $this->status = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('start_time_ms', $this->startTimeMs, 0)
           . Protobuf::toString('unknown_status', $this->unknownStatus, false)
           . Protobuf::toString('walking', $this->walking, false)
           . Protobuf::toString('running', $this->running, false)
           . Protobuf::toString('stationary', $this->stationary, false)
           . Protobuf::toString('automotive', $this->automotive, false)
           . Protobuf::toString('tilting', $this->tilting, false)
           . Protobuf::toString('cycling', $this->cycling, false)
           . Protobuf::toString('status', $this->status, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature.ActivityStatus)
  }

  // message POGOProtos.Networking.Envelopes.Signature
  final class Signature extends ProtobufMessage {

    private $_unknown;
    private $field1 = array(); // repeated .POGOProtos.Networking.Envelopes.UnknownMessage field1 = 1
    private $timestampSinceStart = 0; // optional uint64 timestamp_since_start = 2
    private $field3 = ""; // optional string field3 = 3
    private $locationFix = array(); // repeated .POGOProtos.Networking.Envelopes.Signature.LocationFix location_fix = 4
    private $gpsInfo = array(); // repeated .POGOProtos.Networking.Envelopes.Signature.AndroidGpsInfo gps_info = 5
    private $field6 = array(); // repeated .POGOProtos.Networking.Envelopes.UnknownMessage field6 = 6
    private $sensorInfo = array(); // repeated .POGOProtos.Networking.Envelopes.Signature.SensorInfo sensor_info = 7
    private $deviceInfo = null; // optional .POGOProtos.Networking.Envelopes.Signature.DeviceInfo device_info = 8
    private $activityStatus = null; // optional .POGOProtos.Networking.Envelopes.Signature.ActivityStatus activity_status = 9
    private $locationHash1 = 0; // optional int32 location_hash1 = 10
    private $field11 = false; // optional bool field11 = 11
    private $field12 = false; // optional bool field12 = 12
    private $field13 = 0; // optional int32 field13 = 13
    private $field14 = 0; // optional int32 field14 = 14
    private $field15 = ""; // optional string field15 = 15
    private $field16 = 0; // optional int32 field16 = 16
    private $field17 = ""; // optional string field17 = 17
    private $field18 = ""; // optional string field18 = 18
    private $field19 = false; // optional bool field19 = 19
    private $locationHash2 = 0; // optional int32 location_hash2 = 20
    private $field21 = false; // optional bool field21 = 21
    private $sessionHash = ""; // optional bytes session_hash = 22
    private $timestamp = 0; // optional uint64 timestamp = 23
    private $requestHash = array(); // repeated uint64 request_hash = 24
    private $unknown25 = 0; // optional int64 unknown25 = 25

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // repeated .POGOProtos.Networking.Envelopes.UnknownMessage field1 = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->field1[] = new \POGOProtos\Networking\Envelopes\UnknownMessage($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\UnknownMessage did not read the full length');

            break;
          case 2: // optional uint64 timestamp_since_start = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timestampSinceStart = $tmp;

            break;
          case 3: // optional string field3 = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->field3 = $tmp;

            break;
          case 4: // repeated .POGOProtos.Networking.Envelopes.Signature.LocationFix location_fix = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->locationFix[] = new \POGOProtos\Networking\Envelopes\Signature_LocationFix($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Signature_LocationFix did not read the full length');

            break;
          case 5: // repeated .POGOProtos.Networking.Envelopes.Signature.AndroidGpsInfo gps_info = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->gpsInfo[] = new \POGOProtos\Networking\Envelopes\Signature_AndroidGpsInfo($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Signature_AndroidGpsInfo did not read the full length');

            break;
          case 6: // repeated .POGOProtos.Networking.Envelopes.UnknownMessage field6 = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->field6[] = new \POGOProtos\Networking\Envelopes\UnknownMessage($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\UnknownMessage did not read the full length');

            break;
          case 7: // repeated .POGOProtos.Networking.Envelopes.Signature.SensorInfo sensor_info = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->sensorInfo[] = new \POGOProtos\Networking\Envelopes\Signature_SensorInfo($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Signature_SensorInfo did not read the full length');

            break;
          case 8: // optional .POGOProtos.Networking.Envelopes.Signature.DeviceInfo device_info = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->deviceInfo = new \POGOProtos\Networking\Envelopes\Signature_DeviceInfo($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Signature_DeviceInfo did not read the full length');

            break;
          case 9: // optional .POGOProtos.Networking.Envelopes.Signature.ActivityStatus activity_status = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->activityStatus = new \POGOProtos\Networking\Envelopes\Signature_ActivityStatus($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Signature_ActivityStatus did not read the full length');

            break;
          case 10: // optional int32 location_hash1 = 10
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->locationHash1 = $tmp;

            break;
          case 11: // optional bool field11 = 11
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->field11 = ($tmp > 0) ? true : false;

            break;
          case 12: // optional bool field12 = 12
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->field12 = ($tmp > 0) ? true : false;

            break;
          case 13: // optional int32 field13 = 13
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->field13 = $tmp;

            break;
          case 14: // optional int32 field14 = 14
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->field14 = $tmp;

            break;
          case 15: // optional string field15 = 15
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->field15 = $tmp;

            break;
          case 16: // optional int32 field16 = 16
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->field16 = $tmp;

            break;
          case 17: // optional string field17 = 17
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->field17 = $tmp;

            break;
          case 18: // optional string field18 = 18
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->field18 = $tmp;

            break;
          case 19: // optional bool field19 = 19
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->field19 = ($tmp > 0) ? true : false;

            break;
          case 20: // optional int32 location_hash2 = 20
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->locationHash2 = $tmp;

            break;
          case 21: // optional bool field21 = 21
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->field21 = ($tmp > 0) ? true : false;

            break;
          case 22: // optional bytes session_hash = 22
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->sessionHash = $tmp;

            break;
          case 23: // optional uint64 timestamp = 23
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->timestamp = $tmp;

            break;
          case 24: // repeated uint64 request_hash = 24
            if($wire !== 2 && $wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 or 0 got: $wire");
            }
            if ($wire === 0) {
              $tmp = Protobuf::read_varint($fp, $limit);
              if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
              if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->requestHash[] = $tmp;
            } elseif ($wire === 2) {
              $len = Protobuf::read_varint($fp, $limit);
              while ($len > 0) {
                $tmp = Protobuf::read_varint($fp, $len);
                if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
                if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->requestHash[] = $tmp;
              }
            }

            break;
          case 25: // optional int64 unknown25 = 25
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT64 || $tmp > Protobuf::MAX_INT64) throw new \Exception('int64 out of range');$this->unknown25 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      foreach($this->field1 as $v) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->timestampSinceStart !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->timestampSinceStart);
      }
      if ($this->field3 !== "") {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, strlen($this->field3));
        fwrite($fp, $this->field3);
      }
      foreach($this->locationFix as $v) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->gpsInfo as $v) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->field6 as $v) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->sensorInfo as $v) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->deviceInfo !== null) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->deviceInfo->size());
        $this->deviceInfo->write($fp);
      }
      if ($this->activityStatus !== null) {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, $this->activityStatus->size());
        $this->activityStatus->write($fp);
      }
      if ($this->locationHash1 !== 0) {
        fwrite($fp, "P", 1);
        Protobuf::write_varint($fp, $this->locationHash1);
      }
      if ($this->field11 !== false) {
        fwrite($fp, "X", 1);
        Protobuf::write_varint($fp, $this->field11 ? 1 : 0);
      }
      if ($this->field12 !== false) {
        fwrite($fp, "`", 1);
        Protobuf::write_varint($fp, $this->field12 ? 1 : 0);
      }
      if ($this->field13 !== 0) {
        fwrite($fp, "h", 1);
        Protobuf::write_varint($fp, $this->field13);
      }
      if ($this->field14 !== 0) {
        fwrite($fp, "p", 1);
        Protobuf::write_varint($fp, $this->field14);
      }
      if ($this->field15 !== "") {
        fwrite($fp, "z", 1);
        Protobuf::write_varint($fp, strlen($this->field15));
        fwrite($fp, $this->field15);
      }
      if ($this->field16 !== 0) {
        fwrite($fp, "\x80\x01", 2);
        Protobuf::write_varint($fp, $this->field16);
      }
      if ($this->field17 !== "") {
        fwrite($fp, "\x8a\x01", 2);
        Protobuf::write_varint($fp, strlen($this->field17));
        fwrite($fp, $this->field17);
      }
      if ($this->field18 !== "") {
        fwrite($fp, "\x92\x01", 2);
        Protobuf::write_varint($fp, strlen($this->field18));
        fwrite($fp, $this->field18);
      }
      if ($this->field19 !== false) {
        fwrite($fp, "\x98\x01", 2);
        Protobuf::write_varint($fp, $this->field19 ? 1 : 0);
      }
      if ($this->locationHash2 !== 0) {
        fwrite($fp, "\xa0\x01", 2);
        Protobuf::write_varint($fp, $this->locationHash2);
      }
      if ($this->field21 !== false) {
        fwrite($fp, "\xa8\x01", 2);
        Protobuf::write_varint($fp, $this->field21 ? 1 : 0);
      }
      if ($this->sessionHash !== "") {
        fwrite($fp, "\xb2\x01", 2);
        Protobuf::write_varint($fp, strlen($this->sessionHash));
        fwrite($fp, $this->sessionHash);
      }
      if ($this->timestamp !== 0) {
        fwrite($fp, "\xb8\x01", 2);
        Protobuf::write_varint($fp, $this->timestamp);
      }
      foreach($this->requestHash as $v) {
        fwrite($fp, "\xc0\x01", 2);
        Protobuf::write_varint($fp, $v);
      }
      if ($this->unknown25 !== 0) {
        fwrite($fp, "\xc8\x01", 2);
        Protobuf::write_varint($fp, $this->unknown25);
      }
    }

    public function size() {
      $size = 0;
      foreach($this->field1 as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->timestampSinceStart !== 0) {
        $size += 1 + Protobuf::size_varint($this->timestampSinceStart);
      }
      if ($this->field3 !== "") {
        $l = strlen($this->field3);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->locationFix as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->gpsInfo as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->field6 as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->sensorInfo as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->deviceInfo !== null) {
        $l = $this->deviceInfo->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->activityStatus !== null) {
        $l = $this->activityStatus->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->locationHash1 !== 0) {
        $size += 1 + Protobuf::size_varint($this->locationHash1);
      }
      if ($this->field11 !== false) {
        $size += 2;
      }
      if ($this->field12 !== false) {
        $size += 2;
      }
      if ($this->field13 !== 0) {
        $size += 1 + Protobuf::size_varint($this->field13);
      }
      if ($this->field14 !== 0) {
        $size += 1 + Protobuf::size_varint($this->field14);
      }
      if ($this->field15 !== "") {
        $l = strlen($this->field15);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->field16 !== 0) {
        $size += 2 + Protobuf::size_varint($this->field16);
      }
      if ($this->field17 !== "") {
        $l = strlen($this->field17);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->field18 !== "") {
        $l = strlen($this->field18);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->field19 !== false) {
        $size += 3;
      }
      if ($this->locationHash2 !== 0) {
        $size += 2 + Protobuf::size_varint($this->locationHash2);
      }
      if ($this->field21 !== false) {
        $size += 3;
      }
      if ($this->sessionHash !== "") {
        $l = strlen($this->sessionHash);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->timestamp !== 0) {
        $size += 2 + Protobuf::size_varint($this->timestamp);
      }
      foreach($this->requestHash as $v) {
        $l = strlen($v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown25 !== 0) {
        $size += 2 + Protobuf::size_varint($this->unknown25);
      }
      return $size;
    }

    public function clearField1() { $this->field1 = array(); }
    public function getField1Count() { return count($this->field1); }
    public function getField1($index) { return $this->field1[$index]; }
    public function getField1Array() { return $this->field1; }
    public function setField1($index, array $value) {$this->field1[$index] = $value; }
    public function addField1(array $value) { $this->field1[] = $value; }
    public function addAllField1(array $values) { foreach($values as $value) {$this->field1[] = $value; }}

    public function clearTimestampSinceStart() { $this->timestampSinceStart = 0; }
    public function getTimestampSinceStart() { return $this->timestampSinceStart;}
    public function setTimestampSinceStart($value) { $this->timestampSinceStart = $value; }

    public function clearField3() { $this->field3 = ""; }
    public function getField3() { return $this->field3;}
    public function setField3($value) { $this->field3 = $value; }

    public function clearLocationFix() { $this->locationFix = array(); }
    public function getLocationFixCount() { return count($this->locationFix); }
    public function getLocationFix($index) { return $this->locationFix[$index]; }
    public function getLocationFixArray() { return $this->locationFix; }
    public function setLocationFix($index, array $value) {$this->locationFix[$index] = $value; }
    public function addLocationFix(array $value) { $this->locationFix[] = $value; }
    public function addAllLocationFix(array $values) { foreach($values as $value) {$this->locationFix[] = $value; }}

    public function clearGpsInfo() { $this->gpsInfo = array(); }
    public function getGpsInfoCount() { return count($this->gpsInfo); }
    public function getGpsInfo($index) { return $this->gpsInfo[$index]; }
    public function getGpsInfoArray() { return $this->gpsInfo; }
    public function setGpsInfo($index, array $value) {$this->gpsInfo[$index] = $value; }
    public function addGpsInfo(array $value) { $this->gpsInfo[] = $value; }
    public function addAllGpsInfo(array $values) { foreach($values as $value) {$this->gpsInfo[] = $value; }}

    public function clearField6() { $this->field6 = array(); }
    public function getField6Count() { return count($this->field6); }
    public function getField6($index) { return $this->field6[$index]; }
    public function getField6Array() { return $this->field6; }
    public function setField6($index, array $value) {$this->field6[$index] = $value; }
    public function addField6(array $value) { $this->field6[] = $value; }
    public function addAllField6(array $values) { foreach($values as $value) {$this->field6[] = $value; }}

    public function clearSensorInfo() { $this->sensorInfo = array(); }
    public function getSensorInfoCount() { return count($this->sensorInfo); }
    public function getSensorInfo($index) { return $this->sensorInfo[$index]; }
    public function getSensorInfoArray() { return $this->sensorInfo; }
    public function setSensorInfo($index, array $value) {$this->sensorInfo[$index] = $value; }
    public function addSensorInfo(array $value) { $this->sensorInfo[] = $value; }
    public function addAllSensorInfo(array $values) { foreach($values as $value) {$this->sensorInfo[] = $value; }}

    public function clearDeviceInfo() { $this->deviceInfo = null; }
    public function getDeviceInfo() { return $this->deviceInfo;}
    public function setDeviceInfo(\POGOProtos\Networking\Envelopes\Signature_DeviceInfo $value) { $this->deviceInfo = $value; }

    public function clearActivityStatus() { $this->activityStatus = null; }
    public function getActivityStatus() { return $this->activityStatus;}
    public function setActivityStatus(\POGOProtos\Networking\Envelopes\Signature_ActivityStatus $value) { $this->activityStatus = $value; }

    public function clearLocationHash1() { $this->locationHash1 = 0; }
    public function getLocationHash1() { return $this->locationHash1;}
    public function setLocationHash1($value) { $this->locationHash1 = $value; }

    public function clearField11() { $this->field11 = false; }
    public function getField11() { return $this->field11;}
    public function setField11($value) { $this->field11 = $value; }

    public function clearField12() { $this->field12 = false; }
    public function getField12() { return $this->field12;}
    public function setField12($value) { $this->field12 = $value; }

    public function clearField13() { $this->field13 = 0; }
    public function getField13() { return $this->field13;}
    public function setField13($value) { $this->field13 = $value; }

    public function clearField14() { $this->field14 = 0; }
    public function getField14() { return $this->field14;}
    public function setField14($value) { $this->field14 = $value; }

    public function clearField15() { $this->field15 = ""; }
    public function getField15() { return $this->field15;}
    public function setField15($value) { $this->field15 = $value; }

    public function clearField16() { $this->field16 = 0; }
    public function getField16() { return $this->field16;}
    public function setField16($value) { $this->field16 = $value; }

    public function clearField17() { $this->field17 = ""; }
    public function getField17() { return $this->field17;}
    public function setField17($value) { $this->field17 = $value; }

    public function clearField18() { $this->field18 = ""; }
    public function getField18() { return $this->field18;}
    public function setField18($value) { $this->field18 = $value; }

    public function clearField19() { $this->field19 = false; }
    public function getField19() { return $this->field19;}
    public function setField19($value) { $this->field19 = $value; }

    public function clearLocationHash2() { $this->locationHash2 = 0; }
    public function getLocationHash2() { return $this->locationHash2;}
    public function setLocationHash2($value) { $this->locationHash2 = $value; }

    public function clearField21() { $this->field21 = false; }
    public function getField21() { return $this->field21;}
    public function setField21($value) { $this->field21 = $value; }

    public function clearSessionHash() { $this->sessionHash = ""; }
    public function getSessionHash() { return $this->sessionHash;}
    public function setSessionHash($value) { $this->sessionHash = $value; }

    public function clearTimestamp() { $this->timestamp = 0; }
    public function getTimestamp() { return $this->timestamp;}
    public function setTimestamp($value) { $this->timestamp = $value; }

    public function clearRequestHash() { $this->requestHash = array(); }
    public function getRequestHashCount() { return count($this->requestHash); }
    public function getRequestHash($index) { return $this->requestHash[$index]; }
    public function getRequestHashArray() { return $this->requestHash; }
    public function setRequestHash($index, array $value) {$this->requestHash[$index] = $value; }
    public function addRequestHash(array $value) { $this->requestHash[] = $value; }
    public function addAllRequestHash(array $values) { foreach($values as $value) {$this->requestHash[] = $value; }}

    public function clearUnknown25() { $this->unknown25 = 0; }
    public function getUnknown25() { return $this->unknown25;}
    public function setUnknown25($value) { $this->unknown25 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('field1', $this->field1, null)
           . Protobuf::toString('timestamp_since_start', $this->timestampSinceStart, 0)
           . Protobuf::toString('field3', $this->field3, "")
           . Protobuf::toString('location_fix', $this->locationFix, null)
           . Protobuf::toString('gps_info', $this->gpsInfo, null)
           . Protobuf::toString('field6', $this->field6, null)
           . Protobuf::toString('sensor_info', $this->sensorInfo, null)
           . Protobuf::toString('device_info', $this->deviceInfo, null)
           . Protobuf::toString('activity_status', $this->activityStatus, null)
           . Protobuf::toString('location_hash1', $this->locationHash1, 0)
           . Protobuf::toString('field11', $this->field11, false)
           . Protobuf::toString('field12', $this->field12, false)
           . Protobuf::toString('field13', $this->field13, 0)
           . Protobuf::toString('field14', $this->field14, 0)
           . Protobuf::toString('field15', $this->field15, "")
           . Protobuf::toString('field16', $this->field16, 0)
           . Protobuf::toString('field17', $this->field17, "")
           . Protobuf::toString('field18', $this->field18, "")
           . Protobuf::toString('field19', $this->field19, false)
           . Protobuf::toString('location_hash2', $this->locationHash2, 0)
           . Protobuf::toString('field21', $this->field21, false)
           . Protobuf::toString('session_hash', $this->sessionHash, "")
           . Protobuf::toString('timestamp', $this->timestamp, 0)
           . Protobuf::toString('request_hash', $this->requestHash, 0)
           . Protobuf::toString('unknown25', $this->unknown25, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.Signature)
  }

  // message POGOProtos.Networking.Envelopes.UnknownMessage
  final class UnknownMessage extends ProtobufMessage {

    private $_unknown;

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
    }

    public function size() {
      $size = 0;
      return $size;
    }

    public function __toString() {
      return '';
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.UnknownMessage)
  }

}