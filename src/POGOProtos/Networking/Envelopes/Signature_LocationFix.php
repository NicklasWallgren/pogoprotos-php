<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Networking/Envelopes/Signature.proto

namespace POGOProtos\Networking\Envelopes;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>POGOProtos.Networking.Envelopes.Signature.LocationFix</code>
 */
class Signature_LocationFix extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * "network", "gps", "fused", possibly others
     * </pre>
     *
     * <code>string provider = 1;</code>
     */
    private $provider = '';
    /**
     * <pre>
     * in ms since start
     * </pre>
     *
     * <code>uint64 timestamp_snapshot = 2;</code>
     */
    private $timestamp_snapshot = 0;
    /**
     * <pre>
     * Confirmed on android/ios
     * </pre>
     *
     * <code>float altitude = 4;</code>
     */
    private $altitude = 0.0;
    /**
     * <code>float latitude = 13;</code>
     */
    private $latitude = 0.0;
    /**
     * <code>float longitude = 14;</code>
     */
    private $longitude = 0.0;
    /**
     * <pre>
     * iOS only (-1 for no reading available, speed in m/s)
     * </pre>
     *
     * <code>float speed = 18;</code>
     */
    private $speed = 0.0;
    /**
     * <pre>
     * iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by &#64;marcel
     * </pre>
     *
     * <code>float course = 20;</code>
     */
    private $course = 0.0;
    /**
     * <pre>
     * in meters, both on Android and iOS
     * </pre>
     *
     * <code>float horizontal_accuracy = 21;</code>
     */
    private $horizontal_accuracy = 0.0;
    /**
     * <pre>
     * iOS only
     * </pre>
     *
     * <code>float vertical_accuracy = 22;</code>
     */
    private $vertical_accuracy = 0.0;
    /**
     * <pre>
     * Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
     * </pre>
     *
     * <code>uint64 provider_status = 26;</code>
     */
    private $provider_status = 0;
    /**
     * <pre>
     * On iOS there are some LocationFixes with unk26=1 and everything else empty
     * </pre>
     *
     * <code>uint32 floor = 27;</code>
     */
    private $floor = 0;
    /**
     * <pre>
     * Always 1 (if there is data at all)
     * </pre>
     *
     * <code>uint64 location_type = 28;</code>
     */
    private $location_type = 0;

    public function __construct() {
        \GPBMetadata\POGOProtos\Networking\Envelopes\Signature::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * "network", "gps", "fused", possibly others
     * </pre>
     *
     * <code>string provider = 1;</code>
     */
    public function getProvider()
    {
        return $this->provider;
    }

    /**
     * <pre>
     * "network", "gps", "fused", possibly others
     * </pre>
     *
     * <code>string provider = 1;</code>
     */
    public function setProvider($var)
    {
        GPBUtil::checkString($var, True);
        $this->provider = $var;
    }

    /**
     * <pre>
     * in ms since start
     * </pre>
     *
     * <code>uint64 timestamp_snapshot = 2;</code>
     */
    public function getTimestampSnapshot()
    {
        return $this->timestamp_snapshot;
    }

    /**
     * <pre>
     * in ms since start
     * </pre>
     *
     * <code>uint64 timestamp_snapshot = 2;</code>
     */
    public function setTimestampSnapshot($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp_snapshot = $var;
    }

    /**
     * <pre>
     * Confirmed on android/ios
     * </pre>
     *
     * <code>float altitude = 4;</code>
     */
    public function getAltitude()
    {
        return $this->altitude;
    }

    /**
     * <pre>
     * Confirmed on android/ios
     * </pre>
     *
     * <code>float altitude = 4;</code>
     */
    public function setAltitude($var)
    {
        GPBUtil::checkFloat($var);
        $this->altitude = $var;
    }

    /**
     * <code>float latitude = 13;</code>
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * <code>float latitude = 13;</code>
     */
    public function setLatitude($var)
    {
        GPBUtil::checkFloat($var);
        $this->latitude = $var;
    }

    /**
     * <code>float longitude = 14;</code>
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * <code>float longitude = 14;</code>
     */
    public function setLongitude($var)
    {
        GPBUtil::checkFloat($var);
        $this->longitude = $var;
    }

    /**
     * <pre>
     * iOS only (-1 for no reading available, speed in m/s)
     * </pre>
     *
     * <code>float speed = 18;</code>
     */
    public function getSpeed()
    {
        return $this->speed;
    }

    /**
     * <pre>
     * iOS only (-1 for no reading available, speed in m/s)
     * </pre>
     *
     * <code>float speed = 18;</code>
     */
    public function setSpeed($var)
    {
        GPBUtil::checkFloat($var);
        $this->speed = $var;
    }

    /**
     * <pre>
     * iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by &#64;marcel
     * </pre>
     *
     * <code>float course = 20;</code>
     */
    public function getCourse()
    {
        return $this->course;
    }

    /**
     * <pre>
     * iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by &#64;marcel
     * </pre>
     *
     * <code>float course = 20;</code>
     */
    public function setCourse($var)
    {
        GPBUtil::checkFloat($var);
        $this->course = $var;
    }

    /**
     * <pre>
     * in meters, both on Android and iOS
     * </pre>
     *
     * <code>float horizontal_accuracy = 21;</code>
     */
    public function getHorizontalAccuracy()
    {
        return $this->horizontal_accuracy;
    }

    /**
     * <pre>
     * in meters, both on Android and iOS
     * </pre>
     *
     * <code>float horizontal_accuracy = 21;</code>
     */
    public function setHorizontalAccuracy($var)
    {
        GPBUtil::checkFloat($var);
        $this->horizontal_accuracy = $var;
    }

    /**
     * <pre>
     * iOS only
     * </pre>
     *
     * <code>float vertical_accuracy = 22;</code>
     */
    public function getVerticalAccuracy()
    {
        return $this->vertical_accuracy;
    }

    /**
     * <pre>
     * iOS only
     * </pre>
     *
     * <code>float vertical_accuracy = 22;</code>
     */
    public function setVerticalAccuracy($var)
    {
        GPBUtil::checkFloat($var);
        $this->vertical_accuracy = $var;
    }

    /**
     * <pre>
     * Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
     * </pre>
     *
     * <code>uint64 provider_status = 26;</code>
     */
    public function getProviderStatus()
    {
        return $this->provider_status;
    }

    /**
     * <pre>
     * Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
     * </pre>
     *
     * <code>uint64 provider_status = 26;</code>
     */
    public function setProviderStatus($var)
    {
        GPBUtil::checkUint64($var);
        $this->provider_status = $var;
    }

    /**
     * <pre>
     * On iOS there are some LocationFixes with unk26=1 and everything else empty
     * </pre>
     *
     * <code>uint32 floor = 27;</code>
     */
    public function getFloor()
    {
        return $this->floor;
    }

    /**
     * <pre>
     * On iOS there are some LocationFixes with unk26=1 and everything else empty
     * </pre>
     *
     * <code>uint32 floor = 27;</code>
     */
    public function setFloor($var)
    {
        GPBUtil::checkUint32($var);
        $this->floor = $var;
    }

    /**
     * <pre>
     * Always 1 (if there is data at all)
     * </pre>
     *
     * <code>uint64 location_type = 28;</code>
     */
    public function getLocationType()
    {
        return $this->location_type;
    }

    /**
     * <pre>
     * Always 1 (if there is data at all)
     * </pre>
     *
     * <code>uint64 location_type = 28;</code>
     */
    public function setLocationType($var)
    {
        GPBUtil::checkUint64($var);
        $this->location_type = $var;
    }

}

