<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Map/Fort/FortLureInfo.proto

namespace POGOProtos\Map\Fort;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>POGOProtos.Map.Fort.FortLureInfo</code>
 */
class FortLureInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>string fort_id = 1;</code>
     */
    private $fort_id = '';
    /**
     * <code>fixed64 encounter_id = 2;</code>
     */
    private $encounter_id = 0;
    /**
     * <code>.POGOProtos.Enums.PokemonId active_pokemon_id = 3;</code>
     */
    private $active_pokemon_id = 0;
    /**
     * <code>int64 lure_expires_timestamp_ms = 4;</code>
     */
    private $lure_expires_timestamp_ms = 0;

    public function __construct() {
        \GPBMetadata\POGOProtos\Map\Fort\FortLureInfo::initOnce();
        parent::__construct();
    }

    /**
     * <code>string fort_id = 1;</code>
     */
    public function getFortId()
    {
        return $this->fort_id;
    }

    /**
     * <code>string fort_id = 1;</code>
     */
    public function setFortId($var)
    {
        GPBUtil::checkString($var, True);
        $this->fort_id = $var;
    }

    /**
     * <code>fixed64 encounter_id = 2;</code>
     */
    public function getEncounterId()
    {
        return $this->encounter_id;
    }

    /**
     * <code>fixed64 encounter_id = 2;</code>
     */
    public function setEncounterId($var)
    {
        GPBUtil::checkUint64($var);
        $this->encounter_id = $var;
    }

    /**
     * <code>.POGOProtos.Enums.PokemonId active_pokemon_id = 3;</code>
     */
    public function getActivePokemonId()
    {
        return $this->active_pokemon_id;
    }

    /**
     * <code>.POGOProtos.Enums.PokemonId active_pokemon_id = 3;</code>
     */
    public function setActivePokemonId($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Enums\PokemonId::class);
        $this->active_pokemon_id = $var;
    }

    /**
     * <code>int64 lure_expires_timestamp_ms = 4;</code>
     */
    public function getLureExpiresTimestampMs()
    {
        return $this->lure_expires_timestamp_ms;
    }

    /**
     * <code>int64 lure_expires_timestamp_ms = 4;</code>
     */
    public function setLureExpiresTimestampMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->lure_expires_timestamp_ms = $var;
    }

}

