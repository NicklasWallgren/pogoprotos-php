<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Map/Fort/FortData.proto

namespace POGOProtos\Map\Fort;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>POGOProtos.Map.Fort.FortData</code>
 */
class FortData extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>string id = 1;</code>
     */
    private $id = '';
    /**
     * <code>int64 last_modified_timestamp_ms = 2;</code>
     */
    private $last_modified_timestamp_ms = 0;
    /**
     * <code>double latitude = 3;</code>
     */
    private $latitude = 0.0;
    /**
     * <code>double longitude = 4;</code>
     */
    private $longitude = 0.0;
    /**
     * <pre>
     * (Gym only) Team that owns the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.TeamColor owned_by_team = 5;</code>
     */
    private $owned_by_team = 0;
    /**
     * <pre>
     * (Gym only) Highest CP Pokemon ID at the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.PokemonId guard_pokemon_id = 6;</code>
     */
    private $guard_pokemon_id = 0;
    /**
     * <pre>
     * (Gym only) Highest CP Pokemon at the gym.
     * </pre>
     *
     * <code>int32 guard_pokemon_cp = 7;</code>
     */
    private $guard_pokemon_cp = 0;
    /**
     * <code>bool enabled = 8;</code>
     */
    private $enabled = false;
    /**
     * <code>.POGOProtos.Map.Fort.FortType type = 9;</code>
     */
    private $type = 0;
    /**
     * <pre>
     * (Gym only) Prestigate / experience of the gym.
     * </pre>
     *
     * <code>int64 gym_points = 10;</code>
     */
    private $gym_points = 0;
    /**
     * <pre>
     * (Gym only) Whether someone is battling at the gym currently.
     * </pre>
     *
     * <code>bool is_in_battle = 11;</code>
     */
    private $is_in_battle = false;
    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;</code>
     */
    private $active_fort_modifier;
    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>.POGOProtos.Map.Fort.FortLureInfo lure_info = 13;</code>
     */
    private $lure_info = null;
    /**
     * <pre>
     * (Pokestop only) Timestamp when the pokestop can be activated again to get items / xp.
     * </pre>
     *
     * <code>int64 cooldown_complete_timestamp_ms = 14;</code>
     */
    private $cooldown_complete_timestamp_ms = 0;
    /**
     * <code>.POGOProtos.Map.Fort.FortSponsor sponsor = 15;</code>
     */
    private $sponsor = 0;
    /**
     * <code>.POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;</code>
     */
    private $rendering_type = 0;
    /**
     * <code>int64 deploy_lockout_end_ms = 17;</code>
     */
    private $deploy_lockout_end_ms = 0;
    /**
     * <code>.POGOProtos.Data.PokemonDisplay guard_pokemon_display = 18;</code>
     */
    private $guard_pokemon_display = null;

    public function __construct() {
        \GPBMetadata\POGOProtos\Map\Fort\FortData::initOnce();
        parent::__construct();
    }

    /**
     * <code>string id = 1;</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <code>string id = 1;</code>
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;
    }

    /**
     * <code>int64 last_modified_timestamp_ms = 2;</code>
     */
    public function getLastModifiedTimestampMs()
    {
        return $this->last_modified_timestamp_ms;
    }

    /**
     * <code>int64 last_modified_timestamp_ms = 2;</code>
     */
    public function setLastModifiedTimestampMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->last_modified_timestamp_ms = $var;
    }

    /**
     * <code>double latitude = 3;</code>
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * <code>double latitude = 3;</code>
     */
    public function setLatitude($var)
    {
        GPBUtil::checkDouble($var);
        $this->latitude = $var;
    }

    /**
     * <code>double longitude = 4;</code>
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * <code>double longitude = 4;</code>
     */
    public function setLongitude($var)
    {
        GPBUtil::checkDouble($var);
        $this->longitude = $var;
    }

    /**
     * <pre>
     * (Gym only) Team that owns the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.TeamColor owned_by_team = 5;</code>
     */
    public function getOwnedByTeam()
    {
        return $this->owned_by_team;
    }

    /**
     * <pre>
     * (Gym only) Team that owns the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.TeamColor owned_by_team = 5;</code>
     */
    public function setOwnedByTeam($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Enums\TeamColor::class);
        $this->owned_by_team = $var;
    }

    /**
     * <pre>
     * (Gym only) Highest CP Pokemon ID at the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.PokemonId guard_pokemon_id = 6;</code>
     */
    public function getGuardPokemonId()
    {
        return $this->guard_pokemon_id;
    }

    /**
     * <pre>
     * (Gym only) Highest CP Pokemon ID at the gym.
     * </pre>
     *
     * <code>.POGOProtos.Enums.PokemonId guard_pokemon_id = 6;</code>
     */
    public function setGuardPokemonId($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Enums\PokemonId::class);
        $this->guard_pokemon_id = $var;
    }

    /**
     * <pre>
     * (Gym only) Highest CP Pokemon at the gym.
     * </pre>
     *
     * <code>int32 guard_pokemon_cp = 7;</code>
     */
    public function getGuardPokemonCp()
    {
        return $this->guard_pokemon_cp;
    }

    /**
     * <pre>
     * (Gym only) Highest CP Pokemon at the gym.
     * </pre>
     *
     * <code>int32 guard_pokemon_cp = 7;</code>
     */
    public function setGuardPokemonCp($var)
    {
        GPBUtil::checkInt32($var);
        $this->guard_pokemon_cp = $var;
    }

    /**
     * <code>bool enabled = 8;</code>
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * <code>bool enabled = 8;</code>
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortType type = 9;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortType type = 9;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Map\Fort\FortType::class);
        $this->type = $var;
    }

    /**
     * <pre>
     * (Gym only) Prestigate / experience of the gym.
     * </pre>
     *
     * <code>int64 gym_points = 10;</code>
     */
    public function getGymPoints()
    {
        return $this->gym_points;
    }

    /**
     * <pre>
     * (Gym only) Prestigate / experience of the gym.
     * </pre>
     *
     * <code>int64 gym_points = 10;</code>
     */
    public function setGymPoints($var)
    {
        GPBUtil::checkInt64($var);
        $this->gym_points = $var;
    }

    /**
     * <pre>
     * (Gym only) Whether someone is battling at the gym currently.
     * </pre>
     *
     * <code>bool is_in_battle = 11;</code>
     */
    public function getIsInBattle()
    {
        return $this->is_in_battle;
    }

    /**
     * <pre>
     * (Gym only) Whether someone is battling at the gym currently.
     * </pre>
     *
     * <code>bool is_in_battle = 11;</code>
     */
    public function setIsInBattle($var)
    {
        GPBUtil::checkBool($var);
        $this->is_in_battle = $var;
    }

    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;</code>
     */
    public function getActiveFortModifier()
    {
        return $this->active_fort_modifier;
    }

    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>repeated .POGOProtos.Inventory.Item.ItemId active_fort_modifier = 12;</code>
     */
    public function setActiveFortModifier(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, POGOProtos\Inventory\Item\ItemId::class);
        $this->active_fort_modifier = $var;
    }

    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>.POGOProtos.Map.Fort.FortLureInfo lure_info = 13;</code>
     */
    public function getLureInfo()
    {
        return $this->lure_info;
    }

    /**
     * <pre>
     * (Pokestop only)
     * </pre>
     *
     * <code>.POGOProtos.Map.Fort.FortLureInfo lure_info = 13;</code>
     */
    public function setLureInfo(&$var)
    {
        GPBUtil::checkMessage($var, \POGOProtos\Map\Fort\FortLureInfo::class);
        $this->lure_info = $var;
    }

    /**
     * <pre>
     * (Pokestop only) Timestamp when the pokestop can be activated again to get items / xp.
     * </pre>
     *
     * <code>int64 cooldown_complete_timestamp_ms = 14;</code>
     */
    public function getCooldownCompleteTimestampMs()
    {
        return $this->cooldown_complete_timestamp_ms;
    }

    /**
     * <pre>
     * (Pokestop only) Timestamp when the pokestop can be activated again to get items / xp.
     * </pre>
     *
     * <code>int64 cooldown_complete_timestamp_ms = 14;</code>
     */
    public function setCooldownCompleteTimestampMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->cooldown_complete_timestamp_ms = $var;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortSponsor sponsor = 15;</code>
     */
    public function getSponsor()
    {
        return $this->sponsor;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortSponsor sponsor = 15;</code>
     */
    public function setSponsor($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Map\Fort\FortSponsor::class);
        $this->sponsor = $var;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;</code>
     */
    public function getRenderingType()
    {
        return $this->rendering_type;
    }

    /**
     * <code>.POGOProtos.Map.Fort.FortRenderingType rendering_type = 16;</code>
     */
    public function setRenderingType($var)
    {
        GPBUtil::checkEnum($var, \POGOProtos\Map\Fort\FortRenderingType::class);
        $this->rendering_type = $var;
    }

    /**
     * <code>int64 deploy_lockout_end_ms = 17;</code>
     */
    public function getDeployLockoutEndMs()
    {
        return $this->deploy_lockout_end_ms;
    }

    /**
     * <code>int64 deploy_lockout_end_ms = 17;</code>
     */
    public function setDeployLockoutEndMs($var)
    {
        GPBUtil::checkInt64($var);
        $this->deploy_lockout_end_ms = $var;
    }

    /**
     * <code>.POGOProtos.Data.PokemonDisplay guard_pokemon_display = 18;</code>
     */
    public function getGuardPokemonDisplay()
    {
        return $this->guard_pokemon_display;
    }

    /**
     * <code>.POGOProtos.Data.PokemonDisplay guard_pokemon_display = 18;</code>
     */
    public function setGuardPokemonDisplay(&$var)
    {
        GPBUtil::checkMessage($var, \POGOProtos\Data\PokemonDisplay::class);
        $this->guard_pokemon_display = $var;
    }

}

