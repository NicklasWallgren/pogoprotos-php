<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/Badge/BadgeCaptureReward.php');

namespace POGOProtos\Data\Badge {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Data.Badge.BadgeCaptureReward
  final class BadgeCaptureReward extends ProtobufMessage {

    private $_unknown;
    private $captureRewardMultiplier = 0; // optional float capture_reward_multiplier = 1

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional float capture_reward_multiplier = 1
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->captureRewardMultiplier = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->captureRewardMultiplier !== 0) {
        fwrite($fp, "\x0d", 1);
        Protobuf::write_float($fp, $this->captureRewardMultiplier);
      }
    }

    public function size() {
      $size = 0;
      if ($this->captureRewardMultiplier !== 0) {
        $size += 5;
      }
      return $size;
    }

    public function clearCaptureRewardMultiplier() { $this->captureRewardMultiplier = 0; }
    public function getCaptureRewardMultiplier() { return $this->captureRewardMultiplier;}
    public function setCaptureRewardMultiplier($value) { $this->captureRewardMultiplier = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('capture_reward_multiplier', $this->captureRewardMultiplier, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.Badge.BadgeCaptureReward)
  }

}