<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Data/Player/PlayerStats.proto

namespace POGOProtos\Data\Player;

use Google\Protobuf\Internal\DescriptorPool;
use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

class PlayerStats extends \Google\Protobuf\Internal\Message
{
    private $level = 0;
    private $experience = 0;
    private $prev_level_xp = 0;
    private $next_level_xp = 0;
    private $km_walked = 0.0;
    private $pokemons_encountered = 0;
    private $unique_pokedex_entries = 0;
    private $pokemons_captured = 0;
    private $evolutions = 0;
    private $poke_stop_visits = 0;
    private $pokeballs_thrown = 0;
    private $eggs_hatched = 0;
    private $big_magikarp_caught = 0;
    private $battle_attack_won = 0;
    private $battle_attack_total = 0;
    private $battle_defended_won = 0;
    private $battle_training_won = 0;
    private $battle_training_total = 0;
    private $prestige_raised_total = 0;
    private $prestige_dropped_total = 0;
    private $pokemon_deployed = 0;
    private $pokemon_caught_by_type;
    private $small_rattata_caught = 0;

    public function getLevel()
    {
        return $this->level;
    }

    public function setLevel($var)
    {
        GPBUtil::checkInt32($var);
        $this->level = $var;
    }

    public function getExperience()
    {
        return $this->experience;
    }

    public function setExperience($var)
    {
        GPBUtil::checkInt64($var);
        $this->experience = $var;
    }

    public function getPrevLevelXp()
    {
        return $this->prev_level_xp;
    }

    public function setPrevLevelXp($var)
    {
        GPBUtil::checkInt64($var);
        $this->prev_level_xp = $var;
    }

    public function getNextLevelXp()
    {
        return $this->next_level_xp;
    }

    public function setNextLevelXp($var)
    {
        GPBUtil::checkInt64($var);
        $this->next_level_xp = $var;
    }

    public function getKmWalked()
    {
        return $this->km_walked;
    }

    public function setKmWalked($var)
    {
        GPBUtil::checkFloat($var);
        $this->km_walked = $var;
    }

    public function getPokemonsEncountered()
    {
        return $this->pokemons_encountered;
    }

    public function setPokemonsEncountered($var)
    {
        GPBUtil::checkInt32($var);
        $this->pokemons_encountered = $var;
    }

    public function getUniquePokedexEntries()
    {
        return $this->unique_pokedex_entries;
    }

    public function setUniquePokedexEntries($var)
    {
        GPBUtil::checkInt32($var);
        $this->unique_pokedex_entries = $var;
    }

    public function getPokemonsCaptured()
    {
        return $this->pokemons_captured;
    }

    public function setPokemonsCaptured($var)
    {
        GPBUtil::checkInt32($var);
        $this->pokemons_captured = $var;
    }

    public function getEvolutions()
    {
        return $this->evolutions;
    }

    public function setEvolutions($var)
    {
        GPBUtil::checkInt32($var);
        $this->evolutions = $var;
    }

    public function getPokeStopVisits()
    {
        return $this->poke_stop_visits;
    }

    public function setPokeStopVisits($var)
    {
        GPBUtil::checkInt32($var);
        $this->poke_stop_visits = $var;
    }

    public function getPokeballsThrown()
    {
        return $this->pokeballs_thrown;
    }

    public function setPokeballsThrown($var)
    {
        GPBUtil::checkInt32($var);
        $this->pokeballs_thrown = $var;
    }

    public function getEggsHatched()
    {
        return $this->eggs_hatched;
    }

    public function setEggsHatched($var)
    {
        GPBUtil::checkInt32($var);
        $this->eggs_hatched = $var;
    }

    public function getBigMagikarpCaught()
    {
        return $this->big_magikarp_caught;
    }

    public function setBigMagikarpCaught($var)
    {
        GPBUtil::checkInt32($var);
        $this->big_magikarp_caught = $var;
    }

    public function getBattleAttackWon()
    {
        return $this->battle_attack_won;
    }

    public function setBattleAttackWon($var)
    {
        GPBUtil::checkInt32($var);
        $this->battle_attack_won = $var;
    }

    public function getBattleAttackTotal()
    {
        return $this->battle_attack_total;
    }

    public function setBattleAttackTotal($var)
    {
        GPBUtil::checkInt32($var);
        $this->battle_attack_total = $var;
    }

    public function getBattleDefendedWon()
    {
        return $this->battle_defended_won;
    }

    public function setBattleDefendedWon($var)
    {
        GPBUtil::checkInt32($var);
        $this->battle_defended_won = $var;
    }

    public function getBattleTrainingWon()
    {
        return $this->battle_training_won;
    }

    public function setBattleTrainingWon($var)
    {
        GPBUtil::checkInt32($var);
        $this->battle_training_won = $var;
    }

    public function getBattleTrainingTotal()
    {
        return $this->battle_training_total;
    }

    public function setBattleTrainingTotal($var)
    {
        GPBUtil::checkInt32($var);
        $this->battle_training_total = $var;
    }

    public function getPrestigeRaisedTotal()
    {
        return $this->prestige_raised_total;
    }

    public function setPrestigeRaisedTotal($var)
    {
        GPBUtil::checkInt32($var);
        $this->prestige_raised_total = $var;
    }

    public function getPrestigeDroppedTotal()
    {
        return $this->prestige_dropped_total;
    }

    public function setPrestigeDroppedTotal($var)
    {
        GPBUtil::checkInt32($var);
        $this->prestige_dropped_total = $var;
    }

    public function getPokemonDeployed()
    {
        return $this->pokemon_deployed;
    }

    public function setPokemonDeployed($var)
    {
        GPBUtil::checkInt32($var);
        $this->pokemon_deployed = $var;
    }

    public function getPokemonCaughtByType()
    {
        return $this->pokemon_caught_by_type;
    }

    public function setPokemonCaughtByType(&$var)
    {
        GPBUtil::checkRepeatedField($var, GPBType::INT32);
        $this->pokemon_caught_by_type = $var;
    }

    public function getSmallRattataCaught()
    {
        return $this->small_rattata_caught;
    }

    public function setSmallRattataCaught($var)
    {
        GPBUtil::checkInt32($var);
        $this->small_rattata_caught = $var;
    }

}

$pool = DescriptorPool::getGeneratedPool();

$pool->internalAddGeneratedFile(hex2bin(
    "0aba050a28504f474f50726f746f732f446174612f506c617965722f506c" .
    "6179657253746174732e70726f746f1216504f474f50726f746f732e4461" .
    "74612e506c6179657222ed040a0b506c617965725374617473120d0a056c" .
    "6576656c18012001280512120a0a657870657269656e6365180220012803" .
    "12150a0d707265765f6c6576656c5f787018032001280312150a0d6e6578" .
    "745f6c6576656c5f787018042001280312110a096b6d5f77616c6b656418" .
    "0520012802121c0a14706f6b656d6f6e735f656e636f756e746572656418" .
    "0620012805121e0a16756e697175655f706f6b656465785f656e74726965" .
    "7318072001280512190a11706f6b656d6f6e735f63617074757265641808" .
    "2001280512120a0a65766f6c7574696f6e7318092001280512180a10706f" .
    "6b655f73746f705f766973697473180a2001280512180a10706f6b656261" .
    "6c6c735f7468726f776e180b2001280512140a0c656767735f6861746368" .
    "6564180c20012805121b0a136269675f6d6167696b6172705f6361756768" .
    "74180d2001280512190a11626174746c655f61747461636b5f776f6e180e" .
    "20012805121b0a13626174746c655f61747461636b5f746f74616c180f20" .
    "012805121b0a13626174746c655f646566656e6465645f776f6e18102001" .
    "2805121b0a13626174746c655f747261696e696e675f776f6e1811200128" .
    "05121d0a15626174746c655f747261696e696e675f746f74616c18122001" .
    "2805121d0a1570726573746967655f7261697365645f746f74616c181320" .
    "012805121e0a1670726573746967655f64726f707065645f746f74616c18" .
    "142001280512180a10706f6b656d6f6e5f6465706c6f7965641815200128" .
    "05121e0a16706f6b656d6f6e5f6361756768745f62795f74797065181620" .
    "032805121c0a14736d616c6c5f726174746174615f636175676874181720" .
    "012805620670726f746f33"
));

