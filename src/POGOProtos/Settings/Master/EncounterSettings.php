<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: POGOProtos/Settings/Master/EncounterSettings.proto

namespace POGOProtos\Settings\Master;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>POGOProtos.Settings.Master.EncounterSettings</code>
 */
class EncounterSettings extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>float spin_bonus_threshold = 1;</code>
     */
    private $spin_bonus_threshold = 0.0;
    /**
     * <code>float excellent_throw_threshold = 2;</code>
     */
    private $excellent_throw_threshold = 0.0;
    /**
     * <code>float great_throw_threshold = 3;</code>
     */
    private $great_throw_threshold = 0.0;
    /**
     * <code>float nice_throw_threshold = 4;</code>
     */
    private $nice_throw_threshold = 0.0;
    /**
     * <code>int32 milestone_threshold = 5;</code>
     */
    private $milestone_threshold = 0;

    public function __construct() {
        \GPBMetadata\POGOProtos\Settings\Master\EncounterSettings::initOnce();
        parent::__construct();
    }

    /**
     * <code>float spin_bonus_threshold = 1;</code>
     */
    public function getSpinBonusThreshold()
    {
        return $this->spin_bonus_threshold;
    }

    /**
     * <code>float spin_bonus_threshold = 1;</code>
     */
    public function setSpinBonusThreshold($var)
    {
        GPBUtil::checkFloat($var);
        $this->spin_bonus_threshold = $var;
    }

    /**
     * <code>float excellent_throw_threshold = 2;</code>
     */
    public function getExcellentThrowThreshold()
    {
        return $this->excellent_throw_threshold;
    }

    /**
     * <code>float excellent_throw_threshold = 2;</code>
     */
    public function setExcellentThrowThreshold($var)
    {
        GPBUtil::checkFloat($var);
        $this->excellent_throw_threshold = $var;
    }

    /**
     * <code>float great_throw_threshold = 3;</code>
     */
    public function getGreatThrowThreshold()
    {
        return $this->great_throw_threshold;
    }

    /**
     * <code>float great_throw_threshold = 3;</code>
     */
    public function setGreatThrowThreshold($var)
    {
        GPBUtil::checkFloat($var);
        $this->great_throw_threshold = $var;
    }

    /**
     * <code>float nice_throw_threshold = 4;</code>
     */
    public function getNiceThrowThreshold()
    {
        return $this->nice_throw_threshold;
    }

    /**
     * <code>float nice_throw_threshold = 4;</code>
     */
    public function setNiceThrowThreshold($var)
    {
        GPBUtil::checkFloat($var);
        $this->nice_throw_threshold = $var;
    }

    /**
     * <code>int32 milestone_threshold = 5;</code>
     */
    public function getMilestoneThreshold()
    {
        return $this->milestone_threshold;
    }

    /**
     * <code>int32 milestone_threshold = 5;</code>
     */
    public function setMilestoneThreshold($var)
    {
        GPBUtil::checkInt32($var);
        $this->milestone_threshold = $var;
    }

}

