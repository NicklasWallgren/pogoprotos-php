<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/Master/Quest/DailyQuestSettings.php');

namespace POGOProtos\Settings\Master\Quest {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.Master.Quest.DailyQuestSettings
  final class DailyQuestSettings extends ProtobufMessage {

    private $_unknown;
    private $bucketsPerDay = 0; // optional int32 buckets_per_day = 1
    private $streakLength = 0; // optional int32 streak_length = 2
    private $bonusMultiplier = 0; // optional float bonus_multiplier = 3
    private $streakBonusMultiplier = 0; // optional float streak_bonus_multiplier = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 buckets_per_day = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->bucketsPerDay = $tmp;

            break;
          case 2: // optional int32 streak_length = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->streakLength = $tmp;

            break;
          case 3: // optional float bonus_multiplier = 3
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->bonusMultiplier = $tmp;

            break;
          case 4: // optional float streak_bonus_multiplier = 4
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->streakBonusMultiplier = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->bucketsPerDay !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->bucketsPerDay);
      }
      if ($this->streakLength !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->streakLength);
      }
      if ($this->bonusMultiplier !== 0) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $this->bonusMultiplier);
      }
      if ($this->streakBonusMultiplier !== 0) {
        fwrite($fp, "%", 1);
        Protobuf::write_float($fp, $this->streakBonusMultiplier);
      }
    }

    public function size() {
      $size = 0;
      if ($this->bucketsPerDay !== 0) {
        $size += 1 + Protobuf::size_varint($this->bucketsPerDay);
      }
      if ($this->streakLength !== 0) {
        $size += 1 + Protobuf::size_varint($this->streakLength);
      }
      if ($this->bonusMultiplier !== 0) {
        $size += 5;
      }
      if ($this->streakBonusMultiplier !== 0) {
        $size += 5;
      }
      return $size;
    }

    public function clearBucketsPerDay() { $this->bucketsPerDay = 0; }
    public function getBucketsPerDay() { return $this->bucketsPerDay;}
    public function setBucketsPerDay($value) { $this->bucketsPerDay = $value; }

    public function clearStreakLength() { $this->streakLength = 0; }
    public function getStreakLength() { return $this->streakLength;}
    public function setStreakLength($value) { $this->streakLength = $value; }

    public function clearBonusMultiplier() { $this->bonusMultiplier = 0; }
    public function getBonusMultiplier() { return $this->bonusMultiplier;}
    public function setBonusMultiplier($value) { $this->bonusMultiplier = $value; }

    public function clearStreakBonusMultiplier() { $this->streakBonusMultiplier = 0; }
    public function getStreakBonusMultiplier() { return $this->streakBonusMultiplier;}
    public function setStreakBonusMultiplier($value) { $this->streakBonusMultiplier = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('buckets_per_day', $this->bucketsPerDay, 0)
           . Protobuf::toString('streak_length', $this->streakLength, 0)
           . Protobuf::toString('bonus_multiplier', $this->bonusMultiplier, 0)
           . Protobuf::toString('streak_bonus_multiplier', $this->streakBonusMultiplier, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.Master.Quest.DailyQuestSettings)
  }

}