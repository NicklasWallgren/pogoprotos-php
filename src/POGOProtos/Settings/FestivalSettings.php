<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/FestivalSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // enum POGOProtos.Settings.FestivalSettings.FestivalType
  abstract class FestivalSettings_FestivalType extends ProtobufEnum {
    const NONE = 0;
    const HALLOWEEN = 1;

    public static $_values = array(
      0 => "NONE",
      1 => "HALLOWEEN",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Settings.FestivalSettings
  final class FestivalSettings extends ProtobufMessage {

    private $_unknown;
    private $festivalType = \POGOProtos\Settings\FestivalSettings_FestivalType::NONE; // optional .POGOProtos.Settings.FestivalSettings.FestivalType festival_type = 1
    private $key = ""; // optional string key = 2
    private $vector = ""; // optional string vector = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Settings.FestivalSettings.FestivalType festival_type = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->festivalType = $tmp;

            break;
          case 2: // optional string key = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->key = $tmp;

            break;
          case 3: // optional string vector = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->vector = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->festivalType !== \POGOProtos\Settings\FestivalSettings_FestivalType::NONE) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->festivalType);
      }
      if ($this->key !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->key));
        fwrite($fp, $this->key);
      }
      if ($this->vector !== "") {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, strlen($this->vector));
        fwrite($fp, $this->vector);
      }
    }

    public function size() {
      $size = 0;
      if ($this->festivalType !== \POGOProtos\Settings\FestivalSettings_FestivalType::NONE) {
        $size += 1 + Protobuf::size_varint($this->festivalType);
      }
      if ($this->key !== "") {
        $l = strlen($this->key);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->vector !== "") {
        $l = strlen($this->vector);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearFestivalType() { $this->festivalType = \POGOProtos\Settings\FestivalSettings_FestivalType::NONE; }
    public function getFestivalType() { return $this->festivalType;}
    public function setFestivalType($value) { $this->festivalType = $value; }

    public function clearKey() { $this->key = ""; }
    public function getKey() { return $this->key;}
    public function setKey($value) { $this->key = $value; }

    public function clearVector() { $this->vector = ""; }
    public function getVector() { return $this->vector;}
    public function setVector($value) { $this->vector = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('festival_type', $this->festivalType, \POGOProtos\Settings\FestivalSettings_FestivalType::NONE)
           . Protobuf::toString('key', $this->key, "")
           . Protobuf::toString('vector', $this->vector, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.FestivalSettings)
  }

}