<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/GlobalSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Settings.GlobalSettings
  final class GlobalSettings extends ProtobufMessage {

    private $_unknown;
    private $fortSettings = null; // optional .POGOProtos.Settings.FortSettings fort_settings = 2
    private $mapSettings = null; // optional .POGOProtos.Settings.MapSettings map_settings = 3
    private $levelSettings = null; // optional .POGOProtos.Settings.LevelSettings level_settings = 4
    private $inventorySettings = null; // optional .POGOProtos.Settings.InventorySettings inventory_settings = 5
    private $minimumClientVersion = ""; // optional string minimum_client_version = 6
    private $gpsSettings = null; // optional .POGOProtos.Settings.GpsSettings gps_settings = 7
    private $festivalSettings = null; // optional .POGOProtos.Settings.FestivalSettings festival_settings = 8
    private $eventSettings = null; // optional .POGOProtos.Settings.EventSettings event_settings = 9
    private $maxPokemonTypes = 0; // optional int32 max_pokemon_types = 10
    private $sfidaSettings = null; // optional .POGOProtos.Settings.SfidaSettings sfida_settings = 11

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 2: // optional .POGOProtos.Settings.FortSettings fort_settings = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->fortSettings = new \POGOProtos\Settings\FortSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\FortSettings did not read the full length');

            break;
          case 3: // optional .POGOProtos.Settings.MapSettings map_settings = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->mapSettings = new \POGOProtos\Settings\MapSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\MapSettings did not read the full length');

            break;
          case 4: // optional .POGOProtos.Settings.LevelSettings level_settings = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->levelSettings = new \POGOProtos\Settings\LevelSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\LevelSettings did not read the full length');

            break;
          case 5: // optional .POGOProtos.Settings.InventorySettings inventory_settings = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->inventorySettings = new \POGOProtos\Settings\InventorySettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\InventorySettings did not read the full length');

            break;
          case 6: // optional string minimum_client_version = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->minimumClientVersion = $tmp;

            break;
          case 7: // optional .POGOProtos.Settings.GpsSettings gps_settings = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->gpsSettings = new \POGOProtos\Settings\GpsSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\GpsSettings did not read the full length');

            break;
          case 8: // optional .POGOProtos.Settings.FestivalSettings festival_settings = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->festivalSettings = new \POGOProtos\Settings\FestivalSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\FestivalSettings did not read the full length');

            break;
          case 9: // optional .POGOProtos.Settings.EventSettings event_settings = 9
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->eventSettings = new \POGOProtos\Settings\EventSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\EventSettings did not read the full length');

            break;
          case 10: // optional int32 max_pokemon_types = 10
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->maxPokemonTypes = $tmp;

            break;
          case 11: // optional .POGOProtos.Settings.SfidaSettings sfida_settings = 11
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->sfidaSettings = new \POGOProtos\Settings\SfidaSettings($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Settings\SfidaSettings did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->fortSettings !== null) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->fortSettings->size());
        $this->fortSettings->write($fp);
      }
      if ($this->mapSettings !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->mapSettings->size());
        $this->mapSettings->write($fp);
      }
      if ($this->levelSettings !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->levelSettings->size());
        $this->levelSettings->write($fp);
      }
      if ($this->inventorySettings !== null) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->inventorySettings->size());
        $this->inventorySettings->write($fp);
      }
      if ($this->minimumClientVersion !== "") {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, strlen($this->minimumClientVersion));
        fwrite($fp, $this->minimumClientVersion);
      }
      if ($this->gpsSettings !== null) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->gpsSettings->size());
        $this->gpsSettings->write($fp);
      }
      if ($this->festivalSettings !== null) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->festivalSettings->size());
        $this->festivalSettings->write($fp);
      }
      if ($this->eventSettings !== null) {
        fwrite($fp, "J", 1);
        Protobuf::write_varint($fp, $this->eventSettings->size());
        $this->eventSettings->write($fp);
      }
      if ($this->maxPokemonTypes !== 0) {
        fwrite($fp, "P", 1);
        Protobuf::write_varint($fp, $this->maxPokemonTypes);
      }
      if ($this->sfidaSettings !== null) {
        fwrite($fp, "Z", 1);
        Protobuf::write_varint($fp, $this->sfidaSettings->size());
        $this->sfidaSettings->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if ($this->fortSettings !== null) {
        $l = $this->fortSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->mapSettings !== null) {
        $l = $this->mapSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->levelSettings !== null) {
        $l = $this->levelSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->inventorySettings !== null) {
        $l = $this->inventorySettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->minimumClientVersion !== "") {
        $l = strlen($this->minimumClientVersion);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->gpsSettings !== null) {
        $l = $this->gpsSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->festivalSettings !== null) {
        $l = $this->festivalSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->eventSettings !== null) {
        $l = $this->eventSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->maxPokemonTypes !== 0) {
        $size += 1 + Protobuf::size_varint($this->maxPokemonTypes);
      }
      if ($this->sfidaSettings !== null) {
        $l = $this->sfidaSettings->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearFortSettings() { $this->fortSettings = null; }
    public function getFortSettings() { return $this->fortSettings;}
    public function setFortSettings(\POGOProtos\Settings\FortSettings $value) { $this->fortSettings = $value; }

    public function clearMapSettings() { $this->mapSettings = null; }
    public function getMapSettings() { return $this->mapSettings;}
    public function setMapSettings(\POGOProtos\Settings\MapSettings $value) { $this->mapSettings = $value; }

    public function clearLevelSettings() { $this->levelSettings = null; }
    public function getLevelSettings() { return $this->levelSettings;}
    public function setLevelSettings(\POGOProtos\Settings\LevelSettings $value) { $this->levelSettings = $value; }

    public function clearInventorySettings() { $this->inventorySettings = null; }
    public function getInventorySettings() { return $this->inventorySettings;}
    public function setInventorySettings(\POGOProtos\Settings\InventorySettings $value) { $this->inventorySettings = $value; }

    public function clearMinimumClientVersion() { $this->minimumClientVersion = ""; }
    public function getMinimumClientVersion() { return $this->minimumClientVersion;}
    public function setMinimumClientVersion($value) { $this->minimumClientVersion = $value; }

    public function clearGpsSettings() { $this->gpsSettings = null; }
    public function getGpsSettings() { return $this->gpsSettings;}
    public function setGpsSettings(\POGOProtos\Settings\GpsSettings $value) { $this->gpsSettings = $value; }

    public function clearFestivalSettings() { $this->festivalSettings = null; }
    public function getFestivalSettings() { return $this->festivalSettings;}
    public function setFestivalSettings(\POGOProtos\Settings\FestivalSettings $value) { $this->festivalSettings = $value; }

    public function clearEventSettings() { $this->eventSettings = null; }
    public function getEventSettings() { return $this->eventSettings;}
    public function setEventSettings(\POGOProtos\Settings\EventSettings $value) { $this->eventSettings = $value; }

    public function clearMaxPokemonTypes() { $this->maxPokemonTypes = 0; }
    public function getMaxPokemonTypes() { return $this->maxPokemonTypes;}
    public function setMaxPokemonTypes($value) { $this->maxPokemonTypes = $value; }

    public function clearSfidaSettings() { $this->sfidaSettings = null; }
    public function getSfidaSettings() { return $this->sfidaSettings;}
    public function setSfidaSettings(\POGOProtos\Settings\SfidaSettings $value) { $this->sfidaSettings = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('fort_settings', $this->fortSettings, null)
           . Protobuf::toString('map_settings', $this->mapSettings, null)
           . Protobuf::toString('level_settings', $this->levelSettings, null)
           . Protobuf::toString('inventory_settings', $this->inventorySettings, null)
           . Protobuf::toString('minimum_client_version', $this->minimumClientVersion, "")
           . Protobuf::toString('gps_settings', $this->gpsSettings, null)
           . Protobuf::toString('festival_settings', $this->festivalSettings, null)
           . Protobuf::toString('event_settings', $this->eventSettings, null)
           . Protobuf::toString('max_pokemon_types', $this->maxPokemonTypes, 0)
           . Protobuf::toString('sfida_settings', $this->sfidaSettings, null);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.GlobalSettings)
  }

}