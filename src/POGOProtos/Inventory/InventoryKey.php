<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Inventory/InventoryKey.php');

namespace POGOProtos\Inventory {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Inventory.InventoryKey
  final class InventoryKey extends ProtobufMessage {

    private $_unknown;
    private $pokemonId = 0; // optional fixed64 pokemon_id = 1
    private $item = \POGOProtos\Inventory\Item\ItemId::ITEM_UNKNOWN; // optional .POGOProtos.Inventory.Item.ItemId item = 2
    private $pokedexEntryId = 0; // optional int32 pokedex_entry_id = 3
    private $playerStats = false; // optional bool player_stats = 4
    private $playerCurrency = false; // optional bool player_currency = 5
    private $playerCamera = false; // optional bool player_camera = 6
    private $inventoryUpgrades = false; // optional bool inventory_upgrades = 7
    private $appliedItems = false; // optional bool applied_items = 8
    private $eggIncubators = false; // optional bool egg_incubators = 9
    private $pokemonFamilyId = \POGOProtos\Enums\PokemonFamilyId::FAMILY_NONE; // optional .POGOProtos.Enums.PokemonFamilyId pokemon_family_id = 10
    private $questType = \POGOProtos\Enums\QuestType::QUEST_UNKNOWN_TYPE; // optional .POGOProtos.Enums.QuestType quest_type = 11

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional fixed64 pokemon_id = 1
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_uint64($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
            $this->pokemonId = $tmp;

            break;
          case 2: // optional .POGOProtos.Inventory.Item.ItemId item = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->item = $tmp;

            break;
          case 3: // optional int32 pokedex_entry_id = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->pokedexEntryId = $tmp;

            break;
          case 4: // optional bool player_stats = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->playerStats = ($tmp > 0) ? true : false;

            break;
          case 5: // optional bool player_currency = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->playerCurrency = ($tmp > 0) ? true : false;

            break;
          case 6: // optional bool player_camera = 6
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->playerCamera = ($tmp > 0) ? true : false;

            break;
          case 7: // optional bool inventory_upgrades = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->inventoryUpgrades = ($tmp > 0) ? true : false;

            break;
          case 8: // optional bool applied_items = 8
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->appliedItems = ($tmp > 0) ? true : false;

            break;
          case 9: // optional bool egg_incubators = 9
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->eggIncubators = ($tmp > 0) ? true : false;

            break;
          case 10: // optional .POGOProtos.Enums.PokemonFamilyId pokemon_family_id = 10
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->pokemonFamilyId = $tmp;

            break;
          case 11: // optional .POGOProtos.Enums.QuestType quest_type = 11
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->questType = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->pokemonId !== 0) {
        fwrite($fp, "\x09", 1);
        Protobuf::write_uint64($fp, $this->pokemonId);
      }
      if ($this->item !== \POGOProtos\Inventory\Item\ItemId::ITEM_UNKNOWN) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->item);
      }
      if ($this->pokedexEntryId !== 0) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->pokedexEntryId);
      }
      if ($this->playerStats !== false) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->playerStats ? 1 : 0);
      }
      if ($this->playerCurrency !== false) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->playerCurrency ? 1 : 0);
      }
      if ($this->playerCamera !== false) {
        fwrite($fp, "0", 1);
        Protobuf::write_varint($fp, $this->playerCamera ? 1 : 0);
      }
      if ($this->inventoryUpgrades !== false) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->inventoryUpgrades ? 1 : 0);
      }
      if ($this->appliedItems !== false) {
        fwrite($fp, "@", 1);
        Protobuf::write_varint($fp, $this->appliedItems ? 1 : 0);
      }
      if ($this->eggIncubators !== false) {
        fwrite($fp, "H", 1);
        Protobuf::write_varint($fp, $this->eggIncubators ? 1 : 0);
      }
      if ($this->pokemonFamilyId !== \POGOProtos\Enums\PokemonFamilyId::FAMILY_NONE) {
        fwrite($fp, "P", 1);
        Protobuf::write_varint($fp, $this->pokemonFamilyId);
      }
      if ($this->questType !== \POGOProtos\Enums\QuestType::QUEST_UNKNOWN_TYPE) {
        fwrite($fp, "X", 1);
        Protobuf::write_varint($fp, $this->questType);
      }
    }

    public function size() {
      $size = 0;
      if ($this->pokemonId !== 0) {
        $size += 9;
      }
      if ($this->item !== \POGOProtos\Inventory\Item\ItemId::ITEM_UNKNOWN) {
        $size += 1 + Protobuf::size_varint($this->item);
      }
      if ($this->pokedexEntryId !== 0) {
        $size += 1 + Protobuf::size_varint($this->pokedexEntryId);
      }
      if ($this->playerStats !== false) {
        $size += 2;
      }
      if ($this->playerCurrency !== false) {
        $size += 2;
      }
      if ($this->playerCamera !== false) {
        $size += 2;
      }
      if ($this->inventoryUpgrades !== false) {
        $size += 2;
      }
      if ($this->appliedItems !== false) {
        $size += 2;
      }
      if ($this->eggIncubators !== false) {
        $size += 2;
      }
      if ($this->pokemonFamilyId !== \POGOProtos\Enums\PokemonFamilyId::FAMILY_NONE) {
        $size += 1 + Protobuf::size_varint($this->pokemonFamilyId);
      }
      if ($this->questType !== \POGOProtos\Enums\QuestType::QUEST_UNKNOWN_TYPE) {
        $size += 1 + Protobuf::size_varint($this->questType);
      }
      return $size;
    }

    public function clearPokemonId() { $this->pokemonId = 0; }
    public function getPokemonId() { return $this->pokemonId;}
    public function setPokemonId($value) { $this->pokemonId = $value; }

    public function clearItem() { $this->item = \POGOProtos\Inventory\Item\ItemId::ITEM_UNKNOWN; }
    public function getItem() { return $this->item;}
    public function setItem($value) { $this->item = $value; }

    public function clearPokedexEntryId() { $this->pokedexEntryId = 0; }
    public function getPokedexEntryId() { return $this->pokedexEntryId;}
    public function setPokedexEntryId($value) { $this->pokedexEntryId = $value; }

    public function clearPlayerStats() { $this->playerStats = false; }
    public function getPlayerStats() { return $this->playerStats;}
    public function setPlayerStats($value) { $this->playerStats = $value; }

    public function clearPlayerCurrency() { $this->playerCurrency = false; }
    public function getPlayerCurrency() { return $this->playerCurrency;}
    public function setPlayerCurrency($value) { $this->playerCurrency = $value; }

    public function clearPlayerCamera() { $this->playerCamera = false; }
    public function getPlayerCamera() { return $this->playerCamera;}
    public function setPlayerCamera($value) { $this->playerCamera = $value; }

    public function clearInventoryUpgrades() { $this->inventoryUpgrades = false; }
    public function getInventoryUpgrades() { return $this->inventoryUpgrades;}
    public function setInventoryUpgrades($value) { $this->inventoryUpgrades = $value; }

    public function clearAppliedItems() { $this->appliedItems = false; }
    public function getAppliedItems() { return $this->appliedItems;}
    public function setAppliedItems($value) { $this->appliedItems = $value; }

    public function clearEggIncubators() { $this->eggIncubators = false; }
    public function getEggIncubators() { return $this->eggIncubators;}
    public function setEggIncubators($value) { $this->eggIncubators = $value; }

    public function clearPokemonFamilyId() { $this->pokemonFamilyId = \POGOProtos\Enums\PokemonFamilyId::FAMILY_NONE; }
    public function getPokemonFamilyId() { return $this->pokemonFamilyId;}
    public function setPokemonFamilyId($value) { $this->pokemonFamilyId = $value; }

    public function clearQuestType() { $this->questType = \POGOProtos\Enums\QuestType::QUEST_UNKNOWN_TYPE; }
    public function getQuestType() { return $this->questType;}
    public function setQuestType($value) { $this->questType = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('pokemon_id', $this->pokemonId, 0)
           . Protobuf::toString('item', $this->item, \POGOProtos\Inventory\Item\ItemId::ITEM_UNKNOWN)
           . Protobuf::toString('pokedex_entry_id', $this->pokedexEntryId, 0)
           . Protobuf::toString('player_stats', $this->playerStats, false)
           . Protobuf::toString('player_currency', $this->playerCurrency, false)
           . Protobuf::toString('player_camera', $this->playerCamera, false)
           . Protobuf::toString('inventory_upgrades', $this->inventoryUpgrades, false)
           . Protobuf::toString('applied_items', $this->appliedItems, false)
           . Protobuf::toString('egg_incubators', $this->eggIncubators, false)
           . Protobuf::toString('pokemon_family_id', $this->pokemonFamilyId, \POGOProtos\Enums\PokemonFamilyId::FAMILY_NONE)
           . Protobuf::toString('quest_type', $this->questType, \POGOProtos\Enums\QuestType::QUEST_UNKNOWN_TYPE);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Inventory.InventoryKey)
  }

}